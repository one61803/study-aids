(load-file "shuffle.el")

(defun chemical-elements ()
  "Quiz the naming of some chemical elements."
  (interactive)
  (let (rand-int)
    (setq rand-int (random 13))
    (cond
      ((= rand-int 0) (reactive-nonmetals))
      ((= rand-int 1) (noble-gases))
      ((= rand-int 2) (alkali-metals))
      ((= rand-int 3) (alkaline-earth-metals))
      ((= rand-int 4) (metalloids))
      ((= rand-int 5) (post-transition-metals))
      ((= rand-int 6) (transition-metals-I))
      ((= rand-int 7) (transition-metals-II))
      ((= rand-int 8) (transition-metals-III))
      ((= rand-int 9) (lanthanides-I))
      ((= rand-int 10) (lanthanides-II))
      ((= rand-int 11) (actinides-I))
      ((= rand-int 12) (actinides-II)))))
; (describe-function 'chemical-elements)

(defun chemical-elements-comprehensive ()
  "Quiz the naming of all the chemical elements (up to A=103)."
  (interactive)
  (reactive-nonmetals)
  (noble-gases)
  (alkali-metals)
  (alkaline-earth-metals)
  (metalloids)
  (post-transition-metals)
  (transition-metals-I)
  (transition-metals-II)
  (transition-metals-III)
  (lanthanides-I)
  (lanthanides-II)
  (actinides-I)
  (actinides-II)
  (message "Completed comprehensive quiz for naming all the chemical elements (up to A=103)."))
; (describe-function 'chemical-elements-comprehensive)


(setq chemical-elements@ '((1 . "hydrogen") (2 . "helium") (3 . "lithium") (4 . "beryllium") (5 . "boron") (6 . "carbon") (7 . "nitrogen") (8 . "oxygen") (9 . "fluorine") (10 . "neon") (11 . "sodium") (12 . "magnesium") (13 . "aluminum") (14 . "silicon") (15 . "phosphorus") (16 . "sulfur") (17 . "chlorine") (18 . "argon") (19 . "potassium") (20 . "calcium") (21 . "scandium") (22 . "titanium") (23 . "vanadium") (24 . "chromium") (25 . "manganese") (26 . "iron") (27 . "cobalt") (28 . "nickel") (29 . "copper") (30 . "zinc") (31 . "gallium") (32 . "germanium") (33 . "arsenic") (34 . "selenium") (35 . "bromine") (36 . "krypton") (37 . "rubidium") (38 . "strontium") (39 . "yttrium") (40 . "zirconium") (41 . "niobium") (42 . "molybdenum") (43 . "technetium") (44 . "ruthenium") (45 . "rhodium") (46 . "palladium") (47 . "silver") (48 . "cadmium") (49 . "indium") (50 . "tin") (51 . "antimony") (52 . "tellurium") (53 . "iodine") (54 . "xenon") (55 . "cesium") (56 . "barium") (57 . "lanthanum") (58 . "cerium") (59 . "praseodymium") (60 . "neodymium") (61 . "promethium") (62 . "samarium") (63 . "europium") (64 . "gadolinium") (65 . "terbium") (66 . "dysprosium") (67 . "holmium") (68 . "erbium") (69 . "thulium") (70 . "ytterbium") (71 . "lutetium") (72 . "hafnium") (73 . "tantalum") (74 . "tungsten") (75 . "rhenium") (76 . "osmium") (77 . "iridium") (78 . "platinum") (79 . "gold") (80 . "mercury") (81 . "thallium") (82 . "lead") (83 . "bismuth") (84 . "polonium") (85 . "astatine") (86 . "radon") (87 . "francium") (88 . "radium") (89 . "actinium") (90 . "thorium") (91 . "protactinium") (92 . "uranium") (93 . "neptunium") (94 . "plutonium") (95 . "americium") (96 . "curium") (97 . "berkelium") (98 . "californium") (99 . "einsteinium") (100 . "fermium") (101 . "mendelevium") (102 . "nobelium") (103 . "lawrencium")))

(defun actinides-II ()
  "Quiz the naming of actinides “II”."
  (interactive)
  (y-or-n-p "Actinides II")
  (let (list& element answer$)
    (setq list& '(97 98 99 100 101 102 103))
    (while (> (length list&) 0)
      (setq element (car list&))
      (setq list& (cdr list&))
      (setq answer$ (read-string (concat "What is element " (number-to-string element) "? ")))
      (when (not (string= answer$ (cdr (assoc element chemical-elements@))))
        (y-or-n-p "Wrong; the answer is %s." (cdr (assoc element chemical-elements@)))
        (setq list& (append list& (list element))))
      (if (string= answer$ (cdr (assoc element chemical-elements@)))
        (y-or-n-p "Correct!")))
    (message "Completed quiz for naming actinides II.")))
; (describe-function 'actinides-II)

(defun actinides-I ()
  "Quiz the naming of actinides “I”."
  (interactive)
  (y-or-n-p "Actinides I")
  (let (list& element answer$)
    (setq list& '(89 90 91 92 93 94 95 96))
    (while (> (length list&) 0)
      (setq element (car list&))
      (setq list& (cdr list&))
      (setq answer$ (read-string (concat "What is element " (number-to-string element) "? ")))
      (when (not (string= answer$ (cdr (assoc element chemical-elements@))))
        (y-or-n-p "Wrong; the answer is %s." (cdr (assoc element chemical-elements@)))
        (setq list& (append list& (list element))))
      (if (string= answer$ (cdr (assoc element chemical-elements@)))
        (y-or-n-p "Correct!")))
    (message "Completed quiz for naming actinides I.")))
; (describe-function 'actinides-I)

(defun lanthanides-II ()
  "Quiz the naming of lanthanides “II”."
  (interactive)
  (y-or-n-p "Lanthanides II")
  (let (list& element answer$)
    (setq list& '(65 66 67 68 69 70 71))
    (while (> (length list&) 0)
      (setq element (car list&))
      (setq list& (cdr list&))
      (setq answer$ (read-string (concat "What is element " (number-to-string element) "? ")))
      (when (not (string= answer$ (cdr (assoc element chemical-elements@))))
        (y-or-n-p "Wrong; the answer is %s." (cdr (assoc element chemical-elements@)))
        (setq list& (append list& (list element))))
      (if (string= answer$ (cdr (assoc element chemical-elements@)))
        (y-or-n-p "Correct!")))
    (message "Completed quiz for naming lanthanides II.")))
; (describe-function 'lanthanides-II)

(defun lanthanides-I ()
  "Quiz the naming of lanthanides “I”."
  (interactive)
  (y-or-n-p "Lanthanides I")
  (let (list& element answer$)
    (setq list& '(57 58 59 60 61 62 63 64))
    (while (> (length list&) 0)
      (setq element (car list&))
      (setq list& (cdr list&))
      (setq answer$ (read-string (concat "What is element " (number-to-string element) "? ")))
      (when (not (string= answer$ (cdr (assoc element chemical-elements@))))
        (y-or-n-p "Wrong; the answer is %s." (cdr (assoc element chemical-elements@)))
        (setq list& (append list& (list element))))
      (if (string= answer$ (cdr (assoc element chemical-elements@)))
        (y-or-n-p "Correct!")))
    (message "Completed quiz for naming lanthanides I.")))
; (describe-function 'lanthanides-I)

(defun transition-metals-III ()
  "Quiz the naming of transition metals “III”."
  (interactive)
  (y-or-n-p "Transition Metals III")
  (let (list& element answer$)
    (setq list& '(28 46 78 29 47 79 30 48 80))
    (while (> (length list&) 0)
      (setq element (car list&))
      (setq list& (cdr list&))
      (setq answer$ (read-string (concat "What is element " (number-to-string element) "? ")))
      (when (not (string= answer$ (cdr (assoc element chemical-elements@))))
        (y-or-n-p "Wrong; the answer is %s." (cdr (assoc element chemical-elements@)))
        (setq list& (append list& (list element))))
      (if (string= answer$ (cdr (assoc element chemical-elements@)))
        (y-or-n-p "Correct!")))
    (message "Completed quiz for naming transition metals III.")))
; (describe-function 'transition-metals-III)

(defun transition-metals-II ()
  "Quiz the naming of transition metals “II”."
  (interactive)
  (y-or-n-p "Transition Metals II")
  (let (list& element answer$)
    (setq list& '(25 43 75 26 44 76 27 45 77))
    (while (> (length list&) 0)
      (setq element (car list&))
      (setq list& (cdr list&))
      (setq answer$ (read-string (concat "What is element " (number-to-string element) "? ")))
      (when (not (string= answer$ (cdr (assoc element chemical-elements@))))
        (y-or-n-p "Wrong; the answer is %s." (cdr (assoc element chemical-elements@)))
        (setq list& (append list& (list element))))
      (if (string= answer$ (cdr (assoc element chemical-elements@)))
        (y-or-n-p "Correct!")))
    (message "Completed quiz for naming transition metals II.")))
; (describe-function 'transition-metals-II)

(defun transition-metals-I ()
  "Quiz the naming of transition metals “I”."
  (interactive)
  (y-or-n-p "Transition Metals I")
  (let (list& element answer$)
    (setq list& '(21 39 22 40 72 23 41 73 24 42 74))
    (while (> (length list&) 0)
      (setq element (car list&))
      (setq list& (cdr list&))
      (setq answer$ (read-string (concat "What is element " (number-to-string element) "? ")))
      (when (not (string= answer$ (cdr (assoc element chemical-elements@))))
        (y-or-n-p "Wrong; the answer is %s." (cdr (assoc element chemical-elements@)))
        (setq list& (append list& (list element))))
      (if (string= answer$ (cdr (assoc element chemical-elements@)))
        (y-or-n-p "Correct!")))
    (message "Completed quiz for naming transition metals I.")))
; (describe-function 'transition-metals-I)

(defun post-transition-metals ()
  "Quiz the naming of post-transition metals."
  (interactive)
  (y-or-n-p "Post-Transition Metals")
  (let (list& element answer$)
    (setq list& '(13 31 49 81 50 82 83 84))
    (while (> (length list&) 0)
      (setq element (car list&))
      (setq list& (cdr list&))
      (setq answer$ (read-string (concat "What is element " (number-to-string element) "? ")))
      (when (not (string= answer$ (cdr (assoc element chemical-elements@))))
        (y-or-n-p "Wrong; the answer is %s." (cdr (assoc element chemical-elements@)))
        (setq list& (append list& (list element))))
      (if (string= answer$ (cdr (assoc element chemical-elements@)))
        (y-or-n-p "Correct!")))
    (message "Completed quiz for naming post-transition metals.")))
; (describe-function 'post-transition-metals)

(defun metalloids ()
  "Quiz the naming of metalloids."
  (interactive)
  (y-or-n-p "Metalloids")
  (let (list& element answer$)
    (setq list& '(5 14 32 33 51 52 85))
    (while (> (length list&) 0)
      (setq element (car list&))
      (setq list& (cdr list&))
      (setq answer$ (read-string (concat "What is element " (number-to-string element) "? ")))
      (when (not (string= answer$ (cdr (assoc element chemical-elements@))))
        (y-or-n-p "Wrong; the answer is %s." (cdr (assoc element chemical-elements@)))
        (setq list& (append list& (list element))))
      (if (string= answer$ (cdr (assoc element chemical-elements@)))
        (y-or-n-p "Correct!")))
    (message "Completed quiz for naming metalloids.")))
; (describe-function 'metalloids)

(defun alkaline-earth-metals ()
  "Quiz the naming of alkaline earth metals."
  (interactive)
  (y-or-n-p "Alkaline Earth Metals")
  (let (list& element answer$)
    (setq list& '(4 12 20 38 56 88))
    (while (> (length list&) 0)
      (setq element (car list&))
      (setq list& (cdr list&))
      (setq answer$ (read-string (concat "What is element " (number-to-string element) "? ")))
      (when (not (string= answer$ (cdr (assoc element chemical-elements@))))
        (y-or-n-p "Wrong; the answer is %s." (cdr (assoc element chemical-elements@)))
        (setq list& (append list& (list element))))
      (if (string= answer$ (cdr (assoc element chemical-elements@)))
        (y-or-n-p "Correct!")))
    (message "Completed quiz for naming alkaline earth metals.")))
; (describe-function 'alkaline-earth-metals)

(defun alkali-metals ()
  "Quiz the naming of alkali metals."
  (interactive)
  (y-or-n-p "Alkali Metals")
  (let (list& element answer$)
    (setq list& '(3 11 19 37 55 87))
    (while (> (length list&) 0)
      (setq element (car list&))
      (setq list& (cdr list&))
      (setq answer$ (read-string (concat "What is element " (number-to-string element) "? ")))
      (when (not (string= answer$ (cdr (assoc element chemical-elements@))))
        (y-or-n-p "Wrong; the answer is %s." (cdr (assoc element chemical-elements@)))
        (setq list& (append list& (list element))))
      (if (string= answer$ (cdr (assoc element chemical-elements@)))
        (y-or-n-p "Correct!")))
    (message "Completed quiz for naming alkali metals.")))
; (describe-function 'alkali-metals)

(defun noble-gases ()
  "Quiz the naming of nonreactive nonmetals (i.e., noble gases)."
  (interactive)
  (y-or-n-p "Noble Gases")
  (let (list& element answer$)
    (setq list& '(2 10 18 36 54 86))
    (while (> (length list&) 0)
      (setq element (car list&))
      (setq list& (cdr list&))
      (setq answer$ (read-string (concat "What is element " (number-to-string element) "? ")))
      (when (not (string= answer$ (cdr (assoc element chemical-elements@))))
        (y-or-n-p "Wrong; the answer is %s." (cdr (assoc element chemical-elements@)))
        (setq list& (append list& (list element))))
      (if (string= answer$ (cdr (assoc element chemical-elements@)))
        (y-or-n-p "Correct!")))
    (message "Completed quiz for naming noble gases.")))
; (describe-function 'noble-gases)

(defun reactive-nonmetals ()
  "Quiz the naming of reactive nonmetals."
  (interactive)
  (y-or-n-p "Reactive Nonmetals")
  (let (list& element answer$)
    (setq list& '(1 6 7 15 8 16 34 9 17 35 53))
    (while (> (length list&) 0)
      (setq element (car list&))
      (setq list& (cdr list&))
      (setq answer$ (read-string (concat "What is element " (number-to-string element) "? ")))
      (when (not (string= answer$ (cdr (assoc element chemical-elements@))))
        (y-or-n-p "Wrong; the answer is %s." (cdr (assoc element chemical-elements@)))
        (setq list& (append list& (list element))))
      (if (string= answer$ (cdr (assoc element chemical-elements@)))
        (y-or-n-p "Correct!")))
    (message "Completed quiz for naming reactive nonmetals.")))
; (describe-function 'reactive-nonmetals)

(setq chemical-elements-reversed@ '(("hydrogen" . 1) ("helium" . 2) ("lithium" . 3) ("beryllium" . 4) ("boron" . 5) ("carbon" . 6) ("nitrogen" . 7) ("oxygen" . 8) ("fluorine" . 9) ("neon" . 10) ("sodium" . 11) ("magnesium" . 12) ("aluminum" . 13) ("silicon" . 14) ("phosphorus" . 15) ("sulfur" . 16) ("chlorine" . 17) ("argon" . 18) ("potassium" . 19) ("calcium" . 20) ("scandium" . 21) ("titanium" . 22) ("vanadium" . 23) ("chromium" . 24) ("manganese" . 25) ("iron" . 26) ("cobalt" . 27) ("nickel" . 28) ("copper" . 29) ("zinc" . 30) ("gallium" . 31) ("germanium" . 32) ("arsenic" . 33) ("selenium" . 34) ("bromine" . 35) ("krypton" . 36) ("rubidium" . 37) ("strontium" . 38) ("yttrium" . 39) ("zirconium" . 40) ("niobium" . 41) ("molybdenum" . 42) ("technetium" . 43) ("ruthenium" . 44) ("rhodium" . 45) ("palladium" . 46) ("silver" . 47) ("cadmium" . 48) ("indium" . 49) ("tin" . 50) ("antimony" . 51) ("tellurium" . 52) ("iodine" . 53) ("xenon" . 54) ("cesium" . 55) ("barium" . 56) ("lanthanum" . 57) ("cerium" . 58) ("praseodymium" . 59) ("neodymium" . 60) ("promethium" . 61) ("samarium" . 62) ("europium" . 63) ("gadolinium" . 64) ("terbium" . 65) ("dysprosium" . 66) ("holmium" . 67) ("erbium" . 68) ("thulium" . 69) ("ytterbium" . 70) ("lutetium" . 71) ("hafnium" . 72) ("tantalum" . 73) ("tungsten" . 74) ("rhenium" . 75) ("osmium" . 76) ("iridium" . 77) ("platinum" . 78) ("gold" . 79) ("mercury" . 80) ("thallium" . 81) ("lead" . 82) ("bismuth" . 83) ("polonium" . 84) ("astatine" . 85) ("radon" . 86) ("francium" . 87) ("radium" . 88) ("actinium" . 89) ("thorium" . 90) ("protactinium" . 91) ("uranium" . 92) ("neptunium" . 93) ("plutonium" . 94) ("americium" . 95) ("curium" . 96) ("berkelium" . 97) ("californium" . 98) ("einsteinium" . 99) ("fermium" . 100) ("mendelevium" . 101) ("nobelium" . 102) ("lawrencium" . 103)))

(defun actinides-II-reversed ()
  "Quiz for enumerating the actinides “II”."
  (interactive)
  (y-or-n-p "Actinides II")
  (let (list& element$ answer)
    (setq list& '("berkelium" "californium" "einsteinium" "fermium" "mendelevium" "nobelium" "lawrencium"))
    (setq list& (shuffle-list list&))
    (while (> (length list&) 0)
      (setq element$ (car list&))
      (setq list& (cdr list&))
      (setq answer (string-to-number (read-string (concat "What is element " element$ "? "))))
      (when (not (= answer (cdr (assoc element$ chemical-elements-reversed@))))
        (y-or-n-p "Wrong; the answer is %s." (number-to-string (cdr (assoc element$ chemical-elements-reversed@))))
        (setq list& (append list& (list element$))))
      (if (= answer (cdr (assoc element$ chemical-elements-reversed@)))
        (y-or-n-p "Correct!")))
    (message "Completed quiz for enumerating actinides II.")))
; (describe-function 'actinides-II-reversed)

(defun actinides-I-reversed ()
  "Quiz for enumerating the actinides “I”."
  (interactive)
  (y-or-n-p "Actinides I")
  (let (list& element$ answer)
    (setq list& '("actinium" "thorium" "protactinium" "uranium" "neptunium" "plutonium" "americium" "curium"))
    (setq list& (shuffle-list list&))
    (while (> (length list&) 0)
      (setq element$ (car list&))
      (setq list& (cdr list&))
      (setq answer (string-to-number (read-string (concat "What is element " element$ "? "))))
      (when (not (= answer (cdr (assoc element$ chemical-elements-reversed@))))
        (y-or-n-p "Wrong; the answer is %s." (number-to-string (cdr (assoc element$ chemical-elements-reversed@))))
        (setq list& (append list& (list element$))))
      (if (= answer (cdr (assoc element$ chemical-elements-reversed@)))
        (y-or-n-p "Correct!")))
    (message "Completed quiz for enumerating actinides I.")))
; (describe-function 'actinides-I-reversed)

(defun lanthanides-II-reversed ()
  "Quiz for enumerating the lanthanides “II”."
  (interactive)
  (y-or-n-p "Lanthanides II")
  (let (list& element$ answer)
    (setq list& '("terbium" "dysprosium" "holmium" "erbium" "thulium" "ytterbium" "lutetium"))
    (setq list& (shuffle-list list&))
    (while (> (length list&) 0)
      (setq element$ (car list&))
      (setq list& (cdr list&))
      (setq answer (string-to-number (read-string (concat "What is element " element$ "? "))))
      (when (not (= answer (cdr (assoc element$ chemical-elements-reversed@))))
        (y-or-n-p "Wrong; the answer is %s." (number-to-string (cdr (assoc element$ chemical-elements-reversed@))))
        (setq list& (append list& (list element$))))
      (if (= answer (cdr (assoc element$ chemical-elements-reversed@)))
        (y-or-n-p "Correct!")))
    (message "Completed quiz for enumerating lanthanides II.")))
; (describe-function 'lanthanides-II-reversed)

(defun lanthanides-I-reversed ()
  "Quiz for enumerating the lanthanides “I”."
  (interactive)
  (y-or-n-p "Lanthanides I")
  (let (list& element$ answer)
    (setq list& '("lanthanum" "cerium" "praseodymium" "neodymium" "promethium" "samarium" "europium" "gadolinium"))
    (setq list& (shuffle-list list&))
    (while (> (length list&) 0)
      (setq element$ (car list&))
      (setq list& (cdr list&))
      (setq answer (string-to-number (read-string (concat "What is element " element$ "? "))))
      (when (not (= answer (cdr (assoc element$ chemical-elements-reversed@))))
        (y-or-n-p "Wrong; the answer is %s." (number-to-string (cdr (assoc element$ chemical-elements-reversed@))))
        (setq list& (append list& (list element$))))
      (if (= answer (cdr (assoc element$ chemical-elements-reversed@)))
        (y-or-n-p "Correct!")))
    (message "Completed quiz for enumerating lanthanides I.")))
; (describe-function 'lanthanides-I-reversed)

(defun transition-metals-III-reversed ()
  "Quiz for enumerating the transition metals “III”."
  (interactive)
  (y-or-n-p "Transition Metals III")
  (let (list& element$ answer)
    (setq list& '("nickel" "palladium" "platinum" "copper" "silver" "gold" "zinc" "cadmium" "mercury"))
    (while (> (length list&) 0)
      (setq element$ (car list&))
      (setq list& (cdr list&))
      (setq answer (string-to-number (read-string (concat "What is element " element$ "? "))))
      (when (not (= answer (cdr (assoc element$ chemical-elements-reversed@))))
        (y-or-n-p "Wrong; the answer is %s." (number-to-string (cdr (assoc element$ chemical-elements-reversed@))))
        (setq list& (append list& (list element$))))
      (if (= answer (cdr (assoc element$ chemical-elements-reversed@)))
        (y-or-n-p "Correct!")))
    (message "Completed quiz for enumerating transition metals III.")))
; (describe-function 'transition-metals-III-reversed)

(defun transition-metals-II-reversed ()
  "Quiz for enumerating the transition metals “II”."
  (interactive)
  (y-or-n-p "Transition Metals II")
  (let (list& element$ answer)
    (setq list& '("manganese" "technetium" "rhenium" "iron" "ruthenium" "osmium" "cobalt" "rhodium" "iridium"))
    (while (> (length list&) 0)
      (setq element$ (car list&))
      (setq list& (cdr list&))
      (setq answer (string-to-number (read-string (concat "What is element " element$ "? "))))
      (when (not (= answer (cdr (assoc element$ chemical-elements-reversed@))))
        (y-or-n-p "Wrong; the answer is %s." (number-to-string (cdr (assoc element$ chemical-elements-reversed@))))
        (setq list& (append list& (list element$))))
      (if (= answer (cdr (assoc element$ chemical-elements-reversed@)))
        (y-or-n-p "Correct!")))
    (message "Completed quiz for enumerating transition metals II.")))
; (describe-function 'transition-metals-II-reversed)

(defun transition-metals-I-reversed ()
  "Quiz for enumerating the transition metals “I”."
  (interactive)
  (y-or-n-p "Transition Metals I")
  (let (list& element$ answer)
    (setq list& '("scandium" "yttrium" "titanium" "zirconium" "hafnium" "vanadium" "niobium" "tantalum" "chromium" "molybdenum" "tungsten"))
    (while (> (length list&) 0)
      (setq element$ (car list&))
      (setq list& (cdr list&))
      (setq answer (string-to-number (read-string (concat "What is element " element$ "? "))))
      (when (not (= answer (cdr (assoc element$ chemical-elements-reversed@))))
        (y-or-n-p "Wrong; the answer is %s." (number-to-string (cdr (assoc element$ chemical-elements-reversed@))))
        (setq list& (append list& (list element$))))
      (if (= answer (cdr (assoc element$ chemical-elements-reversed@)))
        (y-or-n-p "Correct!")))
    (message "Completed quiz for enumerating transition metals I.")))
; (describe-function 'transition-metals-I-reversed)

(defun post-transition-metals-reversed ()
  "Quiz for enumerating the post-transition metals."
  (interactive)
  (y-or-n-p "Post-Transition Metals")
  (let (list& element$ answer)
    (setq list& '("aluminum" "gallium" "indium" "thallium" "tin" "lead" "bismuth" "polonium"))
    (setq list& (shuffle-list list&))
    (while (> (length list&) 0)
      (setq element$ (car list&))
      (setq list& (cdr list&))
      (setq answer (string-to-number (read-string (concat "What is element " element$ "? "))))
      (when (not (= answer (cdr (assoc element$ chemical-elements-reversed@))))
        (y-or-n-p "Wrong; the answer is %s." (number-to-string (cdr (assoc element$ chemical-elements-reversed@))))
        (setq list& (append list& (list element$))))
      (if (= answer (cdr (assoc element$ chemical-elements-reversed@)))
        (y-or-n-p "Correct!")))
    (message "Completed quiz for enumerating post-transition metals.")))
; (describe-function 'post-transition-metals-reversed)

(defun metalloids-reversed ()
  "Quiz for enumerating the metalloids."
  (interactive)
  (y-or-n-p "Metalloids")
  (let (list& element$ answer)
    (setq list& '("boron" "silicon" "germanium" "arsenic" "antimony" "tellurium" "astatine"))
    (while (> (length list&) 0)
      (setq element$ (car list&))
      (setq list& (cdr list&))
      (setq answer (string-to-number (read-string (concat "What is element " element$ "? "))))
      (when (not (= answer (cdr (assoc element$ chemical-elements-reversed@))))
        (y-or-n-p "Wrong; the answer is %s." (number-to-string (cdr (assoc element$ chemical-elements-reversed@))))
        (setq list& (append list& (list element$))))
      (if (= answer (cdr (assoc element$ chemical-elements-reversed@)))
        (y-or-n-p "Correct!")))
    (message "Completed quiz for enumerating metalloids.")))
; (describe-function 'metalloids-reversed)

(defun alkaline-earth-metals-reversed ()
  "Quiz for enumerating the alkaline earth metals."
  (interactive)
  (y-or-n-p "Alkaline Earth Metals")
  (let (list& element$ answer)
    (setq list& '("beryllium" "magnesium" "calcium" "strontium" "barium" "radium"))
    (while (> (length list&) 0)
      (setq element$ (car list&))
      (setq list& (cdr list&))
      (setq answer (string-to-number (read-string (concat "What is element " element$ "? "))))
      (when (not (= answer (cdr (assoc element$ chemical-elements-reversed@))))
        (y-or-n-p "Wrong; the answer is %s." (number-to-string (cdr (assoc element$ chemical-elements-reversed@))))
        (setq list& (append list& (list element$))))
      (if (= answer (cdr (assoc element$ chemical-elements-reversed@)))
        (y-or-n-p "Correct!")))
    (message "Completed quiz for enumerating alkaline earth metals.")))
; (describe-function 'alkaline-earth-metals-reversed)

(defun alkali-metals-reversed ()
  "Quiz for enumerating the alkali metals."
  (interactive)
  (y-or-n-p "Alkali Metals")
  (let (list& element$ answer)
    (setq list& '("lithium" "sodium" "potassium" "rubidium" "cesium" "francium"))
    (while (> (length list&) 0)
      (setq element$ (car list&))
      (setq list& (cdr list&))
      (setq answer (string-to-number (read-string (concat "What is element " element$ "? "))))
      (when (not (= answer (cdr (assoc element$ chemical-elements-reversed@))))
        (y-or-n-p "Wrong; the answer is %s." (number-to-string (cdr (assoc element$ chemical-elements-reversed@))))
        (setq list& (append list& (list element$))))
      (if (= answer (cdr (assoc element$ chemical-elements-reversed@)))
        (y-or-n-p "Correct!")))
    (message "Completed quiz for enumerating alkali metals.")))
; (describe-function 'alkali-metals-reversed)

(defun noble-gases-reversed ()
  "Quiz for enumerating the nonreactive nonmetals (i.e., noble gases)."
  (interactive)
  (y-or-n-p "Noble Gases")
  (let (list& element$ answer)
    (setq list& '("helium" "neon" "argon" "krypton" "xenon" "radon"))
    (while (> (length list&) 0)
      (setq element$ (car list&))
      (setq list& (cdr list&))
      (setq answer (string-to-number (read-string (concat "What is element " element$ "? "))))
      (when (not (= answer (cdr (assoc element$ chemical-elements-reversed@))))
        (y-or-n-p "Wrong; the answer is %s." (number-to-string (cdr (assoc element$ chemical-elements-reversed@))))
        (setq list& (append list& (list element$))))
      (if (= answer (cdr (assoc element$ chemical-elements-reversed@)))
        (y-or-n-p "Correct!")))
    (message "Completed quiz for enumerating noble gases.")))
; (describe-function 'noble-gases-reversed)

(defun reactive-nonmetals-reversed ()
  "Quiz for enumerating the reactive nonmetals."
  (interactive)
  (y-or-n-p "Reactive Nonmetals")
  (let (list& element$ answer)
    (setq list& '("hydrogen" "carbon" "nitrogen" "phosphorus" "oxygen" "sulfur" "selenium" "fluorine" "chlorine" "bromine" "iodine"))
    (while (> (length list&) 0)
      (setq element$ (car list&))
      (setq list& (cdr list&))
      (setq answer (string-to-number (read-string (concat "What number is element " element$ "? "))))
      (when (not (= answer (cdr (assoc element$ chemical-elements-reversed@))))
        (y-or-n-p "Wrong; the answer is %s." (number-to-string (cdr (assoc element$ chemical-elements-reversed@))))
        (setq list& (append list& (list element$))))
      (if (= answer (cdr (assoc element$ chemical-elements-reversed@)))
        (y-or-n-p "Correct!")))
    (message "Completed quiz for enumerating reactive nonmetals.")))
; (describe-function 'reactive-nonmetals-reversed)

(defun chemical-elements-reversed ()
  "Quiz for enumerating some chemical elements."
  (interactive)
  (let (rand-int)
    (setq rand-int (random 13))
    (cond
      ((= rand-int 0) (reactive-nonmetals-reversed))
      ((= rand-int 1) (noble-gases-reversed))
      ((= rand-int 2) (alkali-metals-reversed))
      ((= rand-int 3) (alkaline-earth-metals-reversed))
      ((= rand-int 4) (metalloids-reversed))
      ((= rand-int 5) (post-transition-metals-reversed))
      ((= rand-int 6) (transition-metals-I-reversed))
      ((= rand-int 7) (transition-metals-II-reversed))
      ((= rand-int 8) (transition-metals-III-reversed))
      ((= rand-int 9) (lanthanides-I-reversed))
      ((= rand-int 10) (lanthanides-II-reversed))
      ((= rand-int 11) (actinides-I-reversed))
      ((= rand-int 12) (actinides-II-reversed)))))
; (describe-function 'chemical-elements-reversed)

(defun chemical-elements-comprehensive-reversed ()
  "Quiz for enumerating all of the chemical elements (up to A=103)."
  (interactive)
  (reactive-nonmetals-reversed)
  (noble-gases-reversed)
  (alkali-metals-reversed)
  (alkaline-earth-metals-reversed)
  (metalloids-reversed)
  (post-transition-metals-reversed)
  (transition-metals-I-reversed)
  (transition-metals-II-reversed)
  (transition-metals-III-reversed)
  (lanthanides-I-reversed)
  (lanthanides-II-reversed)
  (actinides-I-reversed)
  (actinides-II-reversed)
  (message "Completed comprehensive quiz for naming all the chemical elements (up to A=103)."))
; (describe-function 'chemical-elements-comprehensive-reversed)

(defun chemical-symbols ()
  "Quiz for symbolizing some chemical elements."
  (interactive)
  (let (rand-int)
    (setq rand-int (random 13))
    (cond
      ((= rand-int 0) (reactive-nonmetals-symbols))
      ((= rand-int 1) (noble-gases-symbols))
      ((= rand-int 2) (alkali-metals-symbols))
      ((= rand-int 3) (alkaline-earth-metals-symbols))
      ((= rand-int 4) (metalloids-symbols))
      ((= rand-int 5) (post-transition-metals-symbols))
      ((= rand-int 6) (transition-metals-I-symbols))
      ((= rand-int 7) (transition-metals-II-symbols))
      ((= rand-int 8) (transition-metals-III-symbols))
      ((= rand-int 9) (lanthanides-I-symbols))
      ((= rand-int 10) (lanthanides-II-symbols))
      ((= rand-int 11) (actinides-I-symbols))
      ((= rand-int 12) (actinides-II-symbols)))))
; (describe-function 'chemical-symbols)

(defun chemical-symbols-comprehensive ()
  "Quiz for symbolizing all the chemical elements (up to A=103)."
  (interactive)
  (reactive-nonmetals-symbols)
  (noble-gases-symbols)
  (alkali-metals-symbols)
  (alkaline-earth-metals-symbols)
  (metalloids-symbols)
  (post-transition-metals-symbols)
  (transition-metals-I-symbols)
  (transition-metals-II-symbols)
  (transition-metals-III-symbols)
  (lanthanides-I-symbols)
  (lanthanides-II-symbols)
  (actinides-I-symbols)
  (actinides-II-symbols)
  (message "Completed comprehensive quiz for symbolizing all the chemical elements (up to A=103)."))
; (describe-function 'chemical-symbols-comprehensive)


(setq chemical-symbols@ '((1 . "H") (2 . "He") (3 . "Li") (4 . "Be") (5 . "B") (6 . "C") (7 . "N") (8 . "O") (9 . "F") (10 . "Ne") (11 . "Na") (12 . "Mg") (13 . "Al") (14 . "Si") (15 . "P") (16 . "S") (17 . "Cl") (18 . "Ar") (19 . "K") (20 . "Ca") (21 . "Sc") (22 . "Ti") (23 . "V") (24 . "Cr") (25 . "Mn") (26 . "Fe") (27 . "Co") (28 . "Ni") (29 . "Cu") (30 . "Zn") (31 . "Ga") (32 . "Ge") (33 . "As") (34 . "Se") (35 . "Br") (36 . "Kr") (37 . "Rb") (38 . "Sr") (39 . "Y") (40 . "Zr") (41 . "Nb") (42 . "Mo") (43 . "Tc") (44 . "Ru") (45 . "Rh") (46 . "Pd") (47 . "Ag") (48 . "Cd") (49 . "In") (50 . "Sn") (51 . "Sb") (52 . "Te") (53 . "I") (54 . "Xe") (55 . "Cs") (56 . "Ba") (57 . "La") (58 . "Ce") (59 . "Pr") (60 . "Nd") (61 . "Pm") (62 . "Sm") (63 . "Eu") (64 . "Gd") (65 . "Tb") (66 . "Dy") (67 . "Ho") (68 . "Er") (69 . "Tm") (70 . "Yb") (71 . "Lu") (72 . "Hf") (73 . "Ta") (74 . "W") (75 . "Re") (76 . "Os") (77 . "Ir") (78 . "Pt") (79 . "Au") (80 . "Hg") (81 . "Tl") (82 . "Pb") (83 . "Bi") (84 . "Po") (85 . "At") (86 . "Rn") (87 . "Fr") (88 . "Ra") (89 . "Ac") (90 . "Th") (91 . "Pa") (92 . "U") (93 . "Np") (94 . "Pu") (95 . "Am") (96 . "Cm") (97 . "Bk") (98 . "Cf") (99 . "Es") (100 . "Fm") (101 . "Md") (102 . "No") (103 . "Lr")))

(defun actinides-II-symbols ()
  "Quiz for symbolizing the actinides “II”."
  (interactive)
  (y-or-n-p "Actinides II")
  (let (list& element answer$)
    (setq list& '(97 98 99 100 101 102 103))
    (while (> (length list&) 0)
      (setq element (car list&))
      (setq list& (cdr list&))
      (setq answer$ (read-string (concat "What is the symbol of element " (number-to-string element) "? ")))
      (when (not (string= answer$ (cdr (assoc element chemical-symbols@))))
        (y-or-n-p "Wrong; the answer is %s." (cdr (assoc element chemical-symbols@)))
        (setq list& (append list& (list element))))
      (if (string= answer$ (cdr (assoc element chemical-symbols@)))
        (y-or-n-p "Correct!")))
    (message "Completed quiz for symbolizing the actinides II.")))
; (describe-function 'actinides-II-symbols)

(defun actinides-I-symbols ()
  "Quiz for symbolizing the actinides “I”."
  (interactive)
  (y-or-n-p "Actinides I")
  (let (list& element answer$)
    (setq list& '(89 90 91 92 93 94 95 96))
    (while (> (length list&) 0)
      (setq element (car list&))
      (setq list& (cdr list&))
      (setq answer$ (read-string (concat "What is the symbol of element " (number-to-string element) "? ")))
      (when (not (string= answer$ (cdr (assoc element chemical-symbols@))))
        (y-or-n-p "Wrong; the answer is %s." (cdr (assoc element chemical-symbols@)))
        (setq list& (append list& (list element))))
      (if (string= answer$ (cdr (assoc element chemical-symbols@)))
        (y-or-n-p "Correct!")))
    (message "Completed quiz for symbolizing the actinides I.")))
; (describe-function 'actinides-I-symbols)

(defun lanthanides-II-symbols ()
  "Quiz for symbolizing lanthanides “II”."
  (interactive)
  (y-or-n-p "Lanthanides II")
  (let (list& element answer$)
    (setq list& '(65 66 67 68 69 70 71))
    (while (> (length list&) 0)
      (setq element (car list&))
      (setq list& (cdr list&))
      (setq answer$ (read-string (concat "What is the symbol of element " (number-to-string element) "? ")))
      (when (not (string= answer$ (cdr (assoc element chemical-symbols@))))
        (y-or-n-p "Wrong; the answer is %s." (cdr (assoc element chemical-symbols@)))
        (setq list& (append list& (list element))))
      (if (string= answer$ (cdr (assoc element chemical-symbols@)))
        (y-or-n-p "Correct!")))
    (message "Completed quiz for symbolizing lanthanides II.")))
; (describe-function 'lanthanides-II-symbols)

(defun lanthanides-I-symbols ()
  "Quiz for symbolizing the lanthanides “I”."
  (interactive)
  (y-or-n-p "Lanthanides I")
  (let (list& element answer$)
    (setq list& '(57 58 59 60 61 62 63 64))
    (while (> (length list&) 0)
      (setq element (car list&))
      (setq list& (cdr list&))
      (setq answer$ (read-string (concat "What is the symbol of element " (number-to-string element) "? ")))
      (when (not (string= answer$ (cdr (assoc element chemical-symbols@))))
        (y-or-n-p "Wrong; the answer is %s." (cdr (assoc element chemical-symbols@)))
        (setq list& (append list& (list element))))
      (if (string= answer$ (cdr (assoc element chemical-symbols@)))
        (y-or-n-p "Correct!")))
    (message "Completed quiz for symbolizing the lanthanides I.")))
; (describe-function 'lanthanides-I-symbols)

(defun transition-metals-III-symbols ()
  "Quiz for symbolizing the transition metals “III”."
  (interactive)
  (y-or-n-p "Transition Metals III")
  (let (list& element answer$)
    (setq list& '(28 46 78 29 47 79 30 48 80))
    (while (> (length list&) 0)
      (setq element (car list&))
      (setq list& (cdr list&))
      (setq answer$ (read-string (concat "What is the symbol for element " (number-to-string element) "? ")))
      (when (not (string= answer$ (cdr (assoc element chemical-symbols@))))
        (y-or-n-p "Wrong; the answer is %s." (cdr (assoc element chemical-symbols@)))
        (setq list& (append list& (list element))))
      (if (string= answer$ (cdr (assoc element chemical-symbols@)))
        (y-or-n-p "Correct!")))
    (message "Completed quiz for symbolizing the transition metals III.")))
; (describe-function 'transition-metals-III-symbols)

(defun transition-metals-II-symbols ()
  "Quiz for symbolizing the transition metals “II”."
  (interactive)
  (y-or-n-p "Transition Metals II")
  (let (list& element answer$)
    (setq list& '(25 43 75 26 44 76 27 45 77))
    (while (> (length list&) 0)
      (setq element (car list&))
      (setq list& (cdr list&))
      (setq answer$ (read-string (concat "What is the symbol for element " (number-to-string element) "? ")))
      (when (not (string= answer$ (cdr (assoc element chemical-symbols@))))
        (y-or-n-p "Wrong; the answer is %s." (cdr (assoc element chemical-symbols@)))
        (setq list& (append list& (list element))))
      (if (string= answer$ (cdr (assoc element chemical-symbols@)))
        (y-or-n-p "Correct!")))
    (message "Completed quiz for symbolizing the transition metals II.")))
; (describe-function 'transition-metals-II-symbols)

(defun transition-metals-I-symbols ()
  "Quiz for symbolizing the transition metals “I”."
  (interactive)
  (y-or-n-p "Transition Metals I")
  (let (list& element answer$)
    (setq list& '(21 39 22 40 72 23 41 73 24 42 74))
    (while (> (length list&) 0)
      (setq element (car list&))
      (setq list& (cdr list&))
      (setq answer$ (read-string (concat "What is the symbol for element " (number-to-string element) "? ")))
      (when (not (string= answer$ (cdr (assoc element chemical-symbols@))))
        (y-or-n-p "Wrong; the answer is %s." (cdr (assoc element chemical-symbols@)))
        (setq list& (append list& (list element))))
      (if (string= answer$ (cdr (assoc element chemical-symbols@)))
        (y-or-n-p "Correct!")))
    (message "Completed quiz for symbolizing the transition metals I.")))
; (describe-function 'transition-metals-I-symbols)

(defun post-transition-metals-symbols ()
  "Quiz for symbolizing the post-transition metals."
  (interactive)
  (y-or-n-p "Post-Transition Metals")
  (let (list& element answer$)
    (setq list& '(13 31 49 81 50 82 83 84))
    (while (> (length list&) 0)
      (setq element (car list&))
      (setq list& (cdr list&))
      (setq answer$ (read-string (concat "What is the symbol for element " (number-to-string element) "? ")))
      (when (not (string= answer$ (cdr (assoc element chemical-symbols@))))
        (y-or-n-p "Wrong; the answer is %s." (cdr (assoc element chemical-symbols@)))
        (setq list& (append list& (list element))))
      (if (string= answer$ (cdr (assoc element chemical-symbols@)))
        (y-or-n-p "Correct!")))
    (message "Completed quiz for symbolizing the post-transition metals.")))
; (describe-function 'post-transition-metals-symbols)

(defun metalloids-symbols ()
  "Quiz for symbolizing the metalloids."
  (interactive)
  (y-or-n-p "Metalloids")
  (let (list& element answer$)
    (setq list& '(5 14 32 33 51 52 85))
    (while (> (length list&) 0)
      (setq element (car list&))
      (setq list& (cdr list&))
      (setq answer$ (read-string (concat "What is the symbol for element " (number-to-string element) "? ")))
      (when (not (string= answer$ (cdr (assoc element chemical-symbols@))))
        (y-or-n-p "Wrong; the answer is %s." (cdr (assoc element chemical-symbols@)))
        (setq list& (append list& (list element))))
      (if (string= answer$ (cdr (assoc element chemical-symbols@)))
        (y-or-n-p "Correct!")))
    (message "Completed quiz for symbolizing the metalloids.")))
; (describe-function 'metalloids-symbols)

(defun alkaline-earth-metals-symbols ()
  "Quiz for symbolizing the alkaline earth metals."
  (interactive)
  (y-or-n-p "Alkaline Earth Metals")
  (let (list& element answer$)
    (setq list& '(4 12 20 38 56 88))
    (while (> (length list&) 0)
      (setq element (car list&))
      (setq list& (cdr list&))
      (setq answer$ (read-string (concat "What is the symbol for element " (number-to-string element) "? ")))
      (when (not (string= answer$ (cdr (assoc element chemical-symbols@))))
        (y-or-n-p "Wrong; the answer is %s." (cdr (assoc element chemical-symbols@)))
        (setq list& (append list& (list element))))
      (if (string= answer$ (cdr (assoc element chemical-symbols@)))
        (y-or-n-p "Correct!")))
    (message "Completed quiz for symbolizing the alkaline earth metals.")))
; (describe-function 'alkaline-earth-metals-symbols)

(defun alkali-metals-symbols ()
  "Quiz for symbolizing the alkali metals."
  (interactive)
  (y-or-n-p "Alkali Metals")
  (let (list& element answer$)
    (setq list& '(3 11 19 37 55 87))
    (while (> (length list&) 0)
      (setq element (car list&))
      (setq list& (cdr list&))
      (setq answer$ (read-string (concat "What is the symbol for element " (number-to-string element) "? ")))
      (when (not (string= answer$ (cdr (assoc element chemical-symbols@))))
        (y-or-n-p "Wrong; the answer is %s." (cdr (assoc element chemical-symbols@)))
        (setq list& (append list& (list element))))
      (if (string= answer$ (cdr (assoc element chemical-symbols@)))
        (y-or-n-p "Correct!")))
    (message "Completed quiz for symbolizing the alkali metals.")))
; (describe-function 'alkali-metals-symbols)

(defun noble-gases-symbols ()
  "Quiz for symbolizing the nonreactive nonmetals (i.e., noble gases)."
  (interactive)
  (y-or-n-p "Noble Gases")
  (let (list& element answer$)
    (setq list& '(2 10 18 36 54 86))
    (while (> (length list&) 0)
      (setq element (car list&))
      (setq list& (cdr list&))
      (setq answer$ (read-string (concat "What is the symbol for element " (number-to-string element) "? ")))
      (when (not (string= answer$ (cdr (assoc element chemical-symbols@))))
        (y-or-n-p "Wrong; the answer is %s." (cdr (assoc element chemical-symbols@)))
        (setq list& (append list& (list element))))
      (if (string= answer$ (cdr (assoc element chemical-symbols@)))
        (y-or-n-p "Correct!")))
    (message "Completed quiz for symbolizing the noble gases.")))
; (describe-function 'noble-gases-symbols)

(defun reactive-nonmetals-symbols ()
  "Quiz for symbolizing the reactive nonmetals."
  (interactive)
  (y-or-n-p "Reactive Nonmetals")
  (let (list& element answer$)
    (setq list& '(1 6 7 15 8 16 34 9 17 35 53))
    (while (> (length list&) 0)
      (setq element (car list&))
      (setq list& (cdr list&))
      (setq answer$ (read-string (concat "What is the symbol for element " (number-to-string element) "? ")))
      (when (not (string= answer$ (cdr (assoc element chemical-symbols@))))
        (y-or-n-p "Wrong; the answer is %s." (cdr (assoc element chemical-symbols@)))
        (setq list& (append list& (list element))))
      (if (string= answer$ (cdr (assoc element chemical-symbols@)))
        (y-or-n-p "Correct!")))
    (message "Completed quiz for symbolizing the reactive nonmetals.")))
; (describe-function 'reactive-nonmetals)

(setq chemical-symbols-reversed@ '(("H" . 1) ("He" . 2) ("Li" . 3) ("Be" . 4) ("B" . 5) ("C" . 6) ("N" . 7) ("O" . 8) ("F" . 9) ("Ne" . 10) ("Na" . 11) ("Mg" . 12) ("Al" . 13) ("Si" . 14) ("P" . 15) ("S" . 16) ("Cl" . 17) ("Ar" . 18) ("K" . 19) ("Ca" . 20) ("Sc" . 21) ("Ti" . 22) ("V" . 23) ("Cr" . 24) ("Mn" . 25) ("Fe" . 26) ("Co" . 27) ("Ni" . 28) ("Cu" . 29) ("Zn" . 30) ("Ga" . 31) ("Ge" . 32) ("As" . 33) ("Se" . 34) ("Br" . 35) ("Kr" . 36) ("Rb" . 37) ("Sr" . 38) ("Y" . 39) ("Zr" . 40) ("Nb" . 41) ("Mo" . 42) ("Tc" . 43) ("Ru" . 44) ("Rh" . 45) ("Pd" . 46) ("Ag" . 47) ("Cd" . 48) ("In" . 49) ("Sn" . 50) ("Sb" . 51) ("Te" . 52) ("I" . 53) ("Xe" . 54) ("Cs" . 55) ("Ba" . 56) ("La" . 57) ("Ce" . 58) ("Pr" . 59) ("Nd" . 60) ("Pm" . 61) ("Sm" . 62) ("Eu" . 63) ("Gd" . 64) ("Tb" . 65) ("Dy" . 66) ("Ho" . 67) ("Er" . 68) ("Tm" . 69) ("Yb" . 70) ("Lu" . 71) ("Hf" . 72) ("Ta" . 73) ("W" . 74) ("Re" . 75) ("Os" . 76) ("Ir" . 77) ("Pt" . 78) ("Au" . 79) ("Hg" . 80) ("Tl" . 81) ("Pb" . 82) ("Bi" . 83) ("Po" . 84) ("At" . 85) ("Rn" . 86) ("Fr" . 87) ("Ra" . 88) ("Ac" . 89) ("Th" . 90) ("Pa" . 91) ("U" . 92) ("Np" . 93) ("Pu" . 94) ("Am" . 95) ("Cm" . 96) ("Bk" . 97) ("Cf" . 98) ("Es" . 99) ("Fm" . 100) ("Md" . 101) ("No" . 102) ("Lr" . 103)))

(defun actinides-II-symbols-reversed ()
  "Quiz for enumerating the symbols of the actinides “II”."
  (interactive)
  (y-or-n-p "Actinides II")
  (let (list& element$ answer)
    (setq list& '("Bk" "Cf" "Es" "Fm" "Md" "No" "Lr"))
    (setq list& (shuffle-list list&))
    (while (> (length list&) 0)
      (setq element$ (car list&))
      (setq list& (cdr list&))
      (setq answer (string-to-number (read-string (concat "What number is element " element$ "? "))))
      (when (not (= answer (cdr (assoc element$ chemical-symbols-reversed@))))
        (y-or-n-p "Wrong; the answer is %s." (number-to-string (cdr (assoc element$ chemical-symbols-reversed@))))
        (setq list& (append list& (list element$))))
      (if (= answer (cdr (assoc element$ chemical-symbols-reversed@)))
        (y-or-n-p "Correct!")))
    (message "Completed the quiz for enumerating the symbols of the actinides II.")))
; (describe-function 'actinides-II-symbols-reversed)

(defun actinides-I-symbols-reversed ()
  "Quiz for enumerating the symbols of the actinides “I”."
  (interactive)
  (y-or-n-p "Actinides I")
  (let (list& element$ answer)
    (setq list& '("Ac" "Th" "Pa" "U" "Np" "Pu" "Am" "Cm"))
    (setq list& (shuffle-list list&))
    (while (> (length list&) 0)
      (setq element$ (car list&))
      (setq list& (cdr list&))
      (setq answer (string-to-number (read-string (concat "What number is element " element$ "? "))))
      (when (not (= answer (cdr (assoc element$ chemical-symbols-reversed@))))
        (y-or-n-p "Wrong; the answer is %s." (number-to-string (cdr (assoc element$ chemical-symbols-reversed@))))
        (setq list& (append list& (list element$))))
      (if (= answer (cdr (assoc element$ chemical-symbols-reversed@)))
        (y-or-n-p "Correct!")))
    (message "Completed the quiz for enumerating the symbols of the actinides I.")))
; (describe-function 'actinides-I-symbols-reversed)

(defun lanthanides-II-symbols-reversed ()
  "Quiz for enumerating the symbols of the lanthanides “II”."
  (interactive)
  (y-or-n-p "Lanthanides II")
  (let (list& element$ answer)
    (setq list& '("Tb" "Dy" "Ho" "Er" "Tm" "Yb" "Lu"))
    (setq list& (shuffle-list list&))
    (while (> (length list&) 0)
      (setq element$ (car list&))
      (setq list& (cdr list&))
      (setq answer (string-to-number (read-string (concat "What number is element " element$ "? "))))
      (when (not (= answer (cdr (assoc element$ chemical-symbols-reversed@))))
        (y-or-n-p "Wrong; the answer is %s." (number-to-string (cdr (assoc element$ chemical-symbols-reversed@))))
        (setq list& (append list& (list element$))))
      (if (= answer (cdr (assoc element$ chemical-symbols-reversed@)))
        (y-or-n-p "Correct!")))
    (message "Completed the quiz for enumerating the symbols of the lanthanides II.")))
; (describe-function 'lanthanides-II-symbols-reversed)

(defun lanthanides-I-symbols-reversed ()
  "Quiz for enumerating the symbols of the lanthanides “I”."
  (interactive)
  (y-or-n-p "Lanthanides I")
  (let (list& element$ answer)
    (setq list& '("La" "Ce" "Pr" "Nd" "Pm" "Sm" "Eu" "Gd"))
    (setq list& (shuffle-list list&))
    (while (> (length list&) 0)
      (setq element$ (car list&))
      (setq list& (cdr list&))
      (setq answer (string-to-number (read-string (concat "What number is element " element$ "? "))))
      (when (not (= answer (cdr (assoc element$ chemical-symbols-reversed@))))
        (y-or-n-p "Wrong; the answer is %s." (number-to-string (cdr (assoc element$ chemical-symbols-reversed@))))
        (setq list& (append list& (list element$))))
      (if (= answer (cdr (assoc element$ chemical-symbols-reversed@)))
        (y-or-n-p "Correct!")))
    (message "Completed the quiz for enumerating the symbols of the lanthanides I.")))
; (describe-function 'lanthanides-I-symbols-reversed)

(defun transition-metals-III-symbols-reversed ()
  "Quiz for enumerating the symbols of the transition metals “III”."
  (interactive)
  (y-or-n-p "Transition Metals III")
  (let (list& element$ answer)
    (setq list& '("Ni" "Pd" "Pt" "Cu" "Ag" "Au" "Zn" "Cd" "Hg"))
    (while (> (length list&) 0)
      (setq element$ (car list&))
      (setq list& (cdr list&))
      (setq answer (string-to-number (read-string (concat "What number is element " element$ "? "))))
      (when (not (= answer (cdr (assoc element$ chemical-symbols-reversed@))))
        (y-or-n-p "Wrong; the answer is %s." (number-to-string (cdr (assoc element$ chemical-symbols-reversed@))))
        (setq list& (append list& (list element$))))
      (if (= answer (cdr (assoc element$ chemical-symbols-reversed@)))
        (y-or-n-p "Correct!")))
    (message "Completed the quiz for enumerating the symbols of the transition metals III.")))
; (describe-function 'transition-metals-III-symbols-reversed)

(defun transition-metals-II-symbols-reversed ()
  "Quiz for enumerating the symbols of the transition metals “II”."
  (interactive)
  (y-or-n-p "Transition Metals II")
  (let (list& element$ answer)
    (setq list& '("Mn" "Tc" "Re" "Fe" "Ru" "Os" "Co" "Rh" "Ir"))
    (while (> (length list&) 0)
      (setq element$ (car list&))
      (setq list& (cdr list&))
      (setq answer (string-to-number (read-string (concat "What number is element " element$ "? "))))
      (when (not (= answer (cdr (assoc element$ chemical-symbols-reversed@))))
        (y-or-n-p "Wrong; the answer is %s." (number-to-string (cdr (assoc element$ chemical-symbols-reversed@))))
        (setq list& (append list& (list element$))))
      (if (= answer (cdr (assoc element$ chemical-symbols-reversed@)))
        (y-or-n-p "Correct!")))
    (message "Completed the quiz for enumerating the symbols of the transition metals II.")))
; (describe-function 'transition-metals-II-symbols-reversed)

(defun transition-metals-I-symbols-reversed ()
  "Quiz for enumerating the symbols of the transition metals “I”."
  (interactive)
  (y-or-n-p "Transition Metals I")
  (let (list& element$ answer)
    (setq list& '("Sc" "Y" "Ti" "Zr" "Hf" "V" "Nb" "Ta" "Cr" "Mo" "W"))
    (while (> (length list&) 0)
      (setq element$ (car list&))
      (setq list& (cdr list&))
      (setq answer (string-to-number (read-string (concat "What number is element " element$ "? "))))
      (when (not (= answer (cdr (assoc element$ chemical-symbols-reversed@))))
        (y-or-n-p "Wrong; the answer is %s." (number-to-string (cdr (assoc element$ chemical-symbols-reversed@))))
        (setq list& (append list& (list element$))))
      (if (= answer (cdr (assoc element$ chemical-symbols-reversed@)))
        (y-or-n-p "Correct!")))
    (message "Completed the quiz for enumerating the symbols of the transition metals I.")))
; (describe-function 'transition-metals-I-symbols-reversed)

(defun post-transition-metals-symbols-reversed ()
  "Quiz for enumerating the symbols of the post-transition metals."
  (interactive)
  (y-or-n-p "Post-Transition Metals")
  (let (list& element$ answer)
    (setq list& '("Al" "Ga" "In" "Tl" "Sn" "Pb" "Bi" "Po"))
    (setq list& (shuffle-list list&))
    (while (> (length list&) 0)
      (setq element$ (car list&))
      (setq list& (cdr list&))
      (setq answer (string-to-number (read-string (concat "What number is element " element$ "? "))))
      (when (not (= answer (cdr (assoc element$ chemical-symbols-reversed@))))
        (y-or-n-p "Wrong; the answer is %s." (number-to-string (cdr (assoc element$ chemical-symbols-reversed@))))
        (setq list& (append list& (list element$))))
      (if (= answer (cdr (assoc element$ chemical-symbols-reversed@)))
        (y-or-n-p "Correct!")))
    (message "Completed the quiz for enumerating the symbols of the post-transition metals.")))
; (describe-function 'post-transition-metals-symbols-reversed)

(defun metalloids-symbols-reversed ()
  "Quiz for enumerating the symbols of the metalloids."
  (interactive)
  (y-or-n-p "Metalloids")
  (let (list& element$ answer)
    (setq list& '("B" "Si" "Ge" "As" "Sb" "Te" "At"))
    (while (> (length list&) 0)
      (setq element$ (car list&))
      (setq list& (cdr list&))
      (setq answer (string-to-number (read-string (concat "What number is element " element$ "? "))))
      (when (not (= answer (cdr (assoc element$ chemical-symbols-reversed@))))
        (y-or-n-p "Wrong; the answer is %s." (number-to-string (cdr (assoc element$ chemical-symbols-reversed@))))
        (setq list& (append list& (list element$))))
      (if (= answer (cdr (assoc element$ chemical-symbols-reversed@)))
        (y-or-n-p "Correct!")))
    (message "Completed the quiz for enumerating the symbols of the metalloids.")))
; (describe-function 'metalloids-symbols-reversed)

(defun alkaline-earth-metals-symbols-reversed ()
  "Quiz for enumerating the symbols of the alkaline earth metals."
  (interactive)
  (y-or-n-p "Alkaline Earth Metals")
  (let (list& element$ answer)
    (setq list& '("Be" "Mg" "Ca" "Sr" "Ba" "Ra"))
    (while (> (length list&) 0)
      (setq element$ (car list&))
      (setq list& (cdr list&))
      (setq answer (string-to-number (read-string (concat "What number is element " element$ "? "))))
      (when (not (= answer (cdr (assoc element$ chemical-symbols-reversed@))))
        (y-or-n-p "Wrong; the answer is %s." (number-to-string (cdr (assoc element$ chemical-symbols-reversed@))))
        (setq list& (append list& (list element$))))
      (if (= answer (cdr (assoc element$ chemical-symbols-reversed@)))
        (y-or-n-p "Correct!")))
    (message "Completed the quiz for enumerating the symbols of the alkaline earth metals.")))
; (describe-function 'alkaline-earth-metals-symbols-reversed)

(defun alkali-metals-symbols-reversed ()
  "Quiz for enumerating the symbols of the alkali metals."
  (interactive)
  (y-or-n-p "Alkali Metals")
  (let (list& element$ answer)
    (setq list& '("Li" "Na" "K" "Rb" "Cs" "Fr"))
    (while (> (length list&) 0)
      (setq element$ (car list&))
      (setq list& (cdr list&))
      (setq answer (string-to-number (read-string (concat "What number is element " element$ "? "))))
      (when (not (= answer (cdr (assoc element$ chemical-symbols-reversed@))))
        (y-or-n-p "Wrong; the answer is %s." (number-to-string (cdr (assoc element$ chemical-symbols-reversed@))))
        (setq list& (append list& (list element$))))
      (if (= answer (cdr (assoc element$ chemical-symbols-reversed@)))
        (y-or-n-p "Correct!")))
    (message "Completed the quiz for enumerating the symbols of the alkali metals.")))
; (describe-function 'alkali-metals-symbols-reversed)

(defun noble-gases-symbols-reversed ()
  "Quiz for enumerating the symbols of the nonreactive nonmetals (i.e., noble gases)."
  (interactive)
  (y-or-n-p "Noble Gases")
  (let (list& element$ answer)
    (setq list& '("He" "Ne" "Ar" "Kr" "Xe" "Rn"))
    (while (> (length list&) 0)
      (setq element$ (car list&))
      (setq list& (cdr list&))
      (setq answer (string-to-number (read-string (concat "What number is element " element$ "? "))))
      (when (not (= answer (cdr (assoc element$ chemical-symbols-reversed@))))
        (y-or-n-p "Wrong; the answer is %s." (number-to-string (cdr (assoc element$ chemical-symbols-reversed@))))
        (setq list& (append list& (list element$))))
      (if (= answer (cdr (assoc element$ chemical-symbols-reversed@)))
        (y-or-n-p "Correct!")))
    (message "Completed the quiz for enumerating the symbols of the noble gases.")))
; (describe-function 'noble-gases-symbols-reversed)

(defun reactive-nonmetals-symbols-reversed ()
  "Quiz for enumerating the symbols of the reactive nonmetals."
  (interactive)
  (y-or-n-p "Reactive Nonmetals")
  (let (list& element$ answer)
    (setq list& '("H" "C" "N" "P" "O" "S" "Se" "F" "Cl" "Br" "I"))
    (while (> (length list&) 0)
      (setq element$ (car list&))
      (setq list& (cdr list&))
      (setq answer (string-to-number (read-string (concat "What number is element " element$ "? "))))
      (when (not (= answer (cdr (assoc element$ chemical-symbols-reversed@))))
        (y-or-n-p "Wrong; the answer is %s." (number-to-string (cdr (assoc element$ chemical-symbols-reversed@))))
        (setq list& (append list& (list element$))))
      (if (= answer (cdr (assoc element$ chemical-symbols-reversed@)))
        (y-or-n-p "Correct!")))
    (message "Completed the quiz for enumerating the symbols of the reactive nonmetals.")))
; (describe-function 'reactive-nonmetals-symbols-reversed)

(defun chemical-symbols-reversed ()
  "Quiz for enumerating the symbols of some chemical elements."
  (interactive)
  (let (rand-int)
    (setq rand-int (random 13))
    (cond
      ((= rand-int 0) (reactive-nonmetals-symbols-reversed))
      ((= rand-int 1) (noble-gases-symbols-reversed))
      ((= rand-int 2) (alkali-metals-symbols-reversed))
      ((= rand-int 3) (alkaline-earth-metals-symbols-reversed))
      ((= rand-int 4) (metalloids-symbols-reversed))
      ((= rand-int 5) (post-transition-metals-symbols-reversed))
      ((= rand-int 6) (transition-metals-I-symbols-reversed))
      ((= rand-int 7) (transition-metals-II-symbols-reversed))
      ((= rand-int 8) (transition-metals-III-symbols-reversed))
      ((= rand-int 9) (lanthanides-I-symbols-reversed))
      ((= rand-int 10) (lanthanides-II-symbols-reversed))
      ((= rand-int 11) (actinides-I-symbols-reversed))
      ((= rand-int 12) (actinides-II-symbols-reversed)))))
; (describe-function 'chemical-symbols-reversed)

(defun chemical-symbols-comprehensive-reversed ()
  "Quiz for enumerating the symbols of all the chemical elements (up to A=103)."
  (interactive)
  (reactive-nonmetals-symbols-reversed)
  (noble-gases-symbols-reversed)
  (alkali-metals-symbols-reversed)
  (alkaline-earth-metals-symbols-reversed)
  (metalloids-symbols-reversed)
  (post-transition-metals-symbols-reversed)
  (transition-metals-I-symbols-reversed)
  (transition-metals-II-symbols-reversed)
  (transition-metals-III-symbols-reversed)
  (lanthanides-I-symbols-reversed)
  (lanthanides-II-symbols-reversed)
  (actinides-I-symbols-reversed)
  (actinides-II-symbols-reversed)
  (message "Completed the comprehensive quiz for enumerating the symbols of all the chemical elements (up to A=103)."))
; (describe-function 'chemical-symbols-comprehensive-reversed)

(setq chemical-elements-abbreviated@ '(("hydrogen" . "H") ("helium" . "He") ("lithium" . "Li") ("beryllium" . "Be") ("boron" . "B") ("carbon" . "C") ("nitrogen" . "N") ("oxygen" . "O") ("fluorine" . "F") ("neon" . "Ne") ("sodium" . "Na") ("magnesium" . "Mg") ("aluminum" . "Al") ("silicon" . "Si") ("phosphorus" . "P") ("sulfur" . "S") ("chlorine" . "Cl") ("argon" . "Ar") ("potassium" . "K") ("calcium" . "Ca") ("scandium" . "Sc") ("titanium" . "Ti") ("vanadium" . "V") ("chromium" . "Cr") ("manganese" . "Mn") ("iron" . "Fe") ("cobalt" . "Co") ("nickel" . "Ni") ("copper" . "Cu") ("zinc" . "Zn") ("gallium" . "Ga") ("germanium" . "Ge") ("arsenic" . "As") ("selenium" . "Se") ("bromine" . "Br") ("krypton" . "Kr") ("rubidium" . "Rb") ("strontium" . "Sr") ("yttrium" . "Y") ("zirconium" . "Zr") ("niobium" . "Nb") ("molybdenum" . "Mo") ("technetium" . "Tc") ("ruthenium" . "Ru") ("rhodium" . "Rh") ("palladium" . "Pd") ("silver" . "Ag") ("cadmium" . "Cd") ("indium" . "In") ("tin" . "Sn") ("antimony" . "Sb") ("tellurium" . "Te") ("iodine" . "I") ("xenon" . "Xe") ("cesium" . "Cs") ("barium" . "Ba") ("lanthanum" . "La") ("cerium" . "Ce") ("praseodymium" . "Pr") ("neodymium" . "Nd") ("promethium" . "Pm") ("samarium" . "Sm") ("europium" . "Eu") ("gadolinium" . "Gd") ("terbium" . "Tb") ("dysprosium" . "Dy") ("holmium" . "Ho") ("erbium" . "Er") ("thulium" . "Tm") ("ytterbium" . "Yb") ("lutetium" . "Lu") ("hafnium" . "Hf") ("tantalum" . "Ta") ("tungsten" . "W") ("rhenium" . "Re") ("osmium" . "Os") ("iridium" . "Ir") ("platinum" . "Pt") ("gold" . "Au") ("mercury" . "Hg") ("thallium" . "Tl") ("lead" . "Pb") ("bismuth" . "Bi") ("polonium" . "Po") ("astatine" . "At") ("radon" . "Rn") ("francium" . "Fr") ("radium" . "Ra") ("actinium" . "Ac") ("thorium" . "Th") ("protactinium" . "Pa") ("uranium" . "U") ("neptunium" . "Np") ("plutonium" . "Pu") ("americium" . "Am") ("curium" . "Cm") ("berkelium" . "Bk") ("californium" . "Cf") ("einsteinium" . "Es") ("fermium" . "Fm") ("mendelevium" . "Md") ("nobelium" . "No") ("lawrencium" . "Lr")))

(defun actinides-II-abbreviated ()
  "Quiz for abbreviating the names of the actinides “II”."
  (interactive)
  (y-or-n-p "Actinides II")
  (let (list& element$ answer$)
    (setq list& '("berkelium" "californium" "einsteinium" "fermium" "mendelevium" "nobelium" "lawrencium"))
    (setq list& (shuffle-list list&))
    (while (> (length list&) 0)
      (setq element$ (car list&))
      (setq list& (cdr list&))
      (setq answer$ (read-string (concat "What is the symbol for " element$ "? ")))
      (when (not (string= answer$ (cdr (assoc element$ chemical-elements-abbreviated@))))
        (y-or-n-p "Wrong; the answer is %s." (cdr (assoc element$ chemical-elements-abbreviated@)))
        (setq list& (append list& (list element$))))
      (if (string= answer$ (cdr (assoc element$ chemical-elements-abbreviated@)))
        (y-or-n-p "Correct!")))
    (message "Completed the quiz for abbreviating the names of the actinides II.")))
; (describe-function 'actinides-II-reversed)

(defun actinides-I-abbreviated ()
  "Quiz for abbreviating the names of the actinides “I”."
  (interactive)
  (y-or-n-p "Actinides I")
  (let (list& element$ answer$)
    (setq list& '("actinium" "thorium" "protactinium" "uranium" "neptunium" "plutonium" "americium" "curium"))
    (setq list& (shuffle-list list&))
    (while (> (length list&) 0)
      (setq element$ (car list&))
      (setq list& (cdr list&))
      (setq answer$ (read-string (concat "What is the symbol for " element$ "? ")))
      (when (not (string= answer$ (cdr (assoc element$ chemical-elements-abbreviated@))))
        (y-or-n-p "Wrong; the answer is %s." (cdr (assoc element$ chemical-elements-abbreviated@)))
        (setq list& (append list& (list element$))))
      (if (string= answer$ (cdr (assoc element$ chemical-elements-abbreviated@)))
        (y-or-n-p "Correct!")))
    (message "Completed the quiz for abbreviating the names of the actinides I.")))
; (describe-function 'actinides-I-abbreviated)

(defun lanthanides-II-abbreviated ()
  "Quiz for abbreviating the names of the lanthanides “II”."
  (interactive)
  (y-or-n-p "Lanthanides II")
  (let (list& element$ answer$)
    (setq list& '("terbium" "dysprosium" "holmium" "erbium" "thulium" "ytterbium" "lutetium"))
    (setq list& (shuffle-list list&))
    (while (> (length list&) 0)
      (setq element$ (car list&))
      (setq list& (cdr list&))
      (setq answer$ (read-string (concat "What is the symbol for " element$ "? ")))
      (when (not (string= answer$ (cdr (assoc element$ chemical-elements-abbreviated@))))
        (y-or-n-p "Wrong; the answer is %s." (cdr (assoc element$ chemical-elements-abbreviated@)))
        (setq list& (append list& (list element$))))
      (if (string= answer$ (cdr (assoc element$ chemical-elements-abbreviated@)))
        (y-or-n-p "Correct!")))
    (message "Completed the quiz for abbreviating the names of the lanthanides II.")))
; (describe-function 'lanthanides-II-abbreviated)

(defun lanthanides-I-abbreviated ()
  "Quiz for abbreviating the names of the lanthanides “I”."
  (interactive)
  (y-or-n-p "Lanthanides I")
  (let (list& element$ answer$)
    (setq list& '("lanthanum" "cerium" "praseodymium" "neodymium" "promethium" "samarium" "europium" "gadolinium"))
    (setq list& (shuffle-list list&))
    (while (> (length list&) 0)
      (setq element$ (car list&))
      (setq list& (cdr list&))
      (setq answer$ (read-string (concat "What is the symbol for " element$ "? ")))
      (when (not (string= answer$ (cdr (assoc element$ chemical-elements-abbreviated@))))
        (y-or-n-p "Wrong; the answer is %s." (cdr (assoc element$ chemical-elements-abbreviated@)))
        (setq list& (append list& (list element$))))
      (if (string= answer$ (cdr (assoc element$ chemical-elements-abbreviated@)))
        (y-or-n-p "Correct!")))
    (message "Completed the quiz for abbreviating the names of the lanthanides I.")))
; (describe-function 'lanthanides-I-abbreviated)

(defun transition-metals-III-abbreviated ()
  "Quiz for abbreviating the names of the transition metals “III”."
  (interactive)
  (y-or-n-p "Transition Metals III")
  (let (list& element$ answer$)
    (setq list& '("nickel" "palladium" "platinum" "copper" "silver" "gold" "zinc" "cadmium" "mercury"))
    (while (> (length list&) 0)
      (setq element$ (car list&))
      (setq list& (cdr list&))
      (setq answer$ (read-string (concat "What is the symbol for " element$ "? ")))
      (when (not (string= answer$ (cdr (assoc element$ chemical-elements-abbreviated@))))
        (y-or-n-p "Wrong; the answer is %s." (cdr (assoc element$ chemical-elements-abbreviated@)))
        (setq list& (append list& (list element$))))
      (if (string= answer$ (cdr (assoc element$ chemical-elements-abbreviated@)))
        (y-or-n-p "Correct!")))
    (message "Completed the quiz for abbreviating the names of the transition metals III.")))
; (describe-function 'transition-metals-III-abbreviated)

(defun transition-metals-II-abbreviated ()
  "Quiz for the abbreviations of the names of the transition metals “II”."
  (interactive)
  (y-or-n-p "Transition Metals II")
  (let (list& element$ answer$)
    (setq list& '("manganese" "technetium" "rhenium" "iron" "ruthenium" "osmium" "cobalt" "rhodium" "iridium"))
    (while (> (length list&) 0)
      (setq element$ (car list&))
      (setq list& (cdr list&))
      (setq answer$ (read-string (concat "What is the symbol for " element$ "? ")))
      (when (not (string= answer$ (cdr (assoc element$ chemical-elements-abbreviated@))))
        (y-or-n-p "Wrong; the answer is %s." (cdr (assoc element$ chemical-elements-abbreviated@)))
        (setq list& (append list& (list element$))))
      (if (string= answer$ (cdr (assoc element$ chemical-elements-abbreviated@)))
        (y-or-n-p "Correct!")))
    (message "Completed the quiz for the abbreviations of the transition metals II.")))
; (describe-function 'transition-metals-II-abbreviated)

(defun transition-metals-I-abbreviated ()
  "Quiz for the abbreviations of the names of the transition metals “I”."
  (interactive)
  (y-or-n-p "Transition Metals I")
  (let (list& element$ answer$)
    (setq list& '("scandium" "yttrium" "titanium" "zirconium" "hafnium" "vanadium" "niobium" "tantalum" "chromium" "molybdenum" "tungsten"))
    (while (> (length list&) 0)
      (setq element$ (car list&))
      (setq list& (cdr list&))
      (setq answer$ (read-string (concat "What is the symbol for " element$ "? ")))
      (when (not (string= answer$ (cdr (assoc element$ chemical-elements-abbreviated@))))
        (y-or-n-p "Wrong; the answer is %s." (cdr (assoc element$ chemical-elements-abbreviated@)))
        (setq list& (append list& (list element$))))
      (if (string= answer$ (cdr (assoc element$ chemical-elements-abbreviated@)))
        (y-or-n-p "Correct!")))
    (message "Completed the quiz for abbreviations of the names of the transition metals I.")))
; (describe-function 'transition-metals-I-abbreviated)

(defun post-transition-metals-abbreviated ()
  "Quiz for the abbreviations of the names of the post-transition metals."
  (interactive)
  (y-or-n-p "Post-Transition Metals")
  (let (list& element$ answer$)
    (setq list& '("aluminum" "gallium" "indium" "thallium" "tin" "lead" "bismuth" "polonium"))
    (setq list& (shuffle-list list&))
    (while (> (length list&) 0)
      (setq element$ (car list&))
      (setq list& (cdr list&))
      (setq answer$ (read-string (concat "What is the symbol for " element$ "? ")))
      (when (not (string= answer$ (cdr (assoc element$ chemical-elements-abbreviated@))))
        (y-or-n-p "Wrong; the answer is %s." (cdr (assoc element$ chemical-elements-abbreviated@)))
        (setq list& (append list& (list element$))))
      (if (string= answer$ (cdr (assoc element$ chemical-elements-abbreviated@)))
        (y-or-n-p "Correct!")))
    (message "Completed the quiz for the abbreviations of the names of the post-transition metals.")))
; (describe-function 'post-transition-metals-abbreviated)

(defun metalloids-abbreviated ()
  "Quiz for the abbreviations of the names of the metalloids."
  (interactive)
  (y-or-n-p "Metalloids")
  (let (list& element$ answer$)
    (setq list& '("boron" "silicon" "germanium" "arsenic" "antimony" "tellurium" "astatine"))
    (while (> (length list&) 0)
      (setq element$ (car list&))
      (setq list& (cdr list&))
      (setq answer$ (read-string (concat "What is the symbol for " element$ "? ")))
      (when (not (string= answer$ (cdr (assoc element$ chemical-elements-abbreviated@))))
        (y-or-n-p "Wrong; the answer is %s." (cdr (assoc element$ chemical-elements-abbreviated@)))
        (setq list& (append list& (list element$))))
      (if (string= answer$ (cdr (assoc element$ chemical-elements-abbreviated@)))
        (y-or-n-p "Correct!")))
    (message "Completed the quiz for the abbreviations of the names of the metalloids.")))
; (describe-function 'metalloids-abbreviated)

(defun alkaline-earth-metals-abbreviated ()
  "Quiz for the abbreviations of the names of the alkaline earth metals."
  (interactive)
  (y-or-n-p "Alkaline Earth Metals")
  (let (list& element$ answer$)
    (setq list& '("beryllium" "magnesium" "calcium" "strontium" "barium" "radium"))
    (while (> (length list&) 0)
      (setq element$ (car list&))
      (setq list& (cdr list&))
      (setq answer$ (read-string (concat "What is the symbol for " element$ "? ")))
      (when (not (string= answer$ (cdr (assoc element$ chemical-elements-abbreviated@))))
        (y-or-n-p "Wrong; the answer is %s." (cdr (assoc element$ chemical-elements-abbreviated@)))
        (setq list& (append list& (list element$))))
      (if (string= answer$ (cdr (assoc element$ chemical-elements-abbreviated@)))
        (y-or-n-p "Correct!")))
    (message "Completed the quiz for the abbreviations of the names of the alkaline earth metals.")))
; (describe-function 'alkaline-earth-metals-abbreviated)

(defun alkali-metals-abbreviated ()
  "Quiz for the abbreviations of the names of the alkali metals."
  (interactive)
  (y-or-n-p "Alkali Metals")
  (let (list& element$ answer$)
    (setq list& '("lithium" "sodium" "potassium" "rubidium" "cesium" "francium"))
    (while (> (length list&) 0)
      (setq element$ (car list&))
      (setq list& (cdr list&))
      (setq answer$ (read-string (concat "What is the symbol for " element$ "? ")))
      (when (not (string= answer$ (cdr (assoc element$ chemical-elements-abbreviated@))))
        (y-or-n-p "Wrong; the answer is %s." (cdr (assoc element$ chemical-elements-abbreviated@)))
        (setq list& (append list& (list element$))))
      (if (string= answer$ (cdr (assoc element$ chemical-elements-abbreviated@)))
        (y-or-n-p "Correct!")))
    (message "Completed the quiz for abbreviations of the names of the alkali metals.")))
; (describe-function 'alkali-metals-abbreviated)

(defun noble-gases-abbreviated ()
  "Quiz for the abbreviations of the names of the nonreactive nonmetals (i.e., noble gases)."
  (interactive)
  (y-or-n-p "Noble Gases")
  (let (list& element$ answer$)
    (setq list& '("helium" "neon" "argon" "krypton" "xenon" "radon"))
    (while (> (length list&) 0)
      (setq element$ (car list&))
      (setq list& (cdr list&))
      (setq answer$ (read-string (concat "What is the symbol for " element$ "? ")))
      (when (not (string= answer$ (cdr (assoc element$ chemical-elements-abbreviated@))))
        (y-or-n-p "Wrong; the answer is %s." (cdr (assoc element$ chemical-elements-abbreviated@)))
        (setq list& (append list& (list element$))))
      (if (string= answer$ (cdr (assoc element$ chemical-elements-abbreviated@)))
        (y-or-n-p "Correct!")))
    (message "Completed the quiz for the abbreviations of the names of the noble gases.")))
; (describe-function 'noble-gases-abbreviated)

(defun reactive-nonmetals-abbreviated ()
  "Quiz for the abbreviations of the names of the reactive nonmetals."
  (interactive)
  (y-or-n-p "Reactive Nonmetals")
  (let (list& element$ answer$)
    (setq list& '("hydrogen" "carbon" "nitrogen" "phosphorus" "oxygen" "sulfur" "selenium" "fluorine" "chlorine" "bromine" "iodine"))
    (while (> (length list&) 0)
      (setq element$ (car list&))
      (setq list& (cdr list&))
      (setq answer$ (read-string (concat "What is the symbol for " element$ "? ")))
      (when (not (string= answer$ (cdr (assoc element$ chemical-elements-abbreviated@))))
        (y-or-n-p "Wrong; the answer is %s." (cdr (assoc element$ chemical-elements-abbreviated@)))
        (setq list& (append list& (list element$))))
      (if (string= answer$ (cdr (assoc element$ chemical-elements-abbreviated@)))
        (y-or-n-p "Correct!")))
    (message "Completed the quiz for the abbreviations of the names of the reactive nonmetals.")))
; (describe-function 'reactive-nonmetals-abbreviated)

(defun chemical-elements-abbreviated ()
  "Quiz for the abbreviations of the names of some chemical elements."
  (interactive)
  (let (rand-int)
    (setq rand-int (random 13))
    (cond
      ((= rand-int 0) (reactive-nonmetals-abbreviated))
      ((= rand-int 1) (noble-gases-abbreviated))
      ((= rand-int 2) (alkali-metals-abbreviated))
      ((= rand-int 3) (alkaline-earth-metals-abbreviated))
      ((= rand-int 4) (metalloids-abbreviated))
      ((= rand-int 5) (post-transition-metals-abbreviated))
      ((= rand-int 6) (transition-metals-I-abbreviated))
      ((= rand-int 7) (transition-metals-II-abbreviated))
      ((= rand-int 8) (transition-metals-III-abbreviated))
      ((= rand-int 9) (lanthanides-I-abbreviated))
      ((= rand-int 10) (lanthanides-II-abbreviated))
      ((= rand-int 11) (actinides-I-abbreviated))
      ((= rand-int 12) (actinides-II-abbreviated)))))
; (describe-function 'chemical-elements-abbreviated)

(defun chemical-elements-comprehensive-abbreviated ()
  "Quiz for abbreviating the names of all the chemical elements (up to A=103)."
  (interactive)
  (reactive-nonmetals-abbreviated)
  (noble-gases-abbreviated)
  (alkali-metals-abbreviated)
  (alkaline-earth-metals-abbreviated)
  (metalloids-abbreviated)
  (post-transition-metals-abbreviated)
  (transition-metals-I-abbreviated)
  (transition-metals-II-abbreviated)
  (transition-metals-III-abbreviated)
  (lanthanides-I-abbreviated)
  (lanthanides-II-abbreviated)
  (actinides-I-abbreviated)
  (actinides-II-abbreviated)
  (message "Completed the comprehensive quiz for the abbreviations of the names of all the chemical elements (up to A=103)."))
; (describe-function 'chemical-elements-comprehensive-abbreviated)

(setq chemical-element-abbreviations-expanded@ '(("H" . "hydrogen") ("He" . "helium") ("Li" . "lithium") ("Be" . "beryllium") ("B" . "boron") ("C" . "carbon") ("N" . "nitrogen") ("O" . "oxygen") ("F" . "fluorine") ("Ne" . "neon") ("Na" . "sodium") ("Mg" . "magnesium") ("Al" . "aluminum") ("Si" . "silicon") ("P" . "phosphorus") ("S" . "sulfur") ("Cl" . "chlorine") ("Ar" . "argon") ("K" . "potassium") ("Ca" . "calcium") ("Sc" . "scandium") ("Ti" . "titanium") ("V" . "vanadium") ("Cr" . "chromium") ("Mn" . "manganese") ("Fe" . "iron") ("Co" . "cobalt") ("Ni" . "nickel") ("Cu" . "copper") ("Zn" . "zinc") ("Ga" . "gallium") ("Ge" . "germanium") ("As" . "arsenic") ("Se" . "selenium") ("Br" . "bromine") ("Kr" . "krypton") ("Rb" . "rubidium") ("Sr" . "strontium") ("Y" . "yttrium") ("Zr" . "zirconium") ("Nb" . "niobium") ("Mo" . "molybdenum") ("Tc" . "technetium") ("Ru" . "ruthenium") ("Rh" . "rhodium") ("Pd" . "palladium") ("Ag" . "silver") ("Cd" . "cadmium") ("In" . "indium") ("Sn" . "tin") ("Sb" . "antimony") ("Te" . "tellurium") ("I" . "iodine") ("Xe" . "xenon") ("Cs" . "cesium") ("Ba" . "barium") ("La" . "lanthanum") ("Ce" . "cerium") ("Pr" . "praseodymium") ("Nd" . "neodymium") ("Pm" . "promethium") ("Sm" . "samarium") ("Eu" . "europium") ("Gd" . "gadolinium") ("Tb" . "terbium") ("Dy" . "dysprosium") ("Ho" . "holmium") ("Er" . "erbium") ("Tm" . "thulium") ("Yb" . "ytterbium") ("Lu" . "lutetium") ("Hf" . "hafnium") ("Ta" . "tantalum") ("W" . "tungsten") ("Re" . "rhenium") ("Os" . "osmium") ("Ir" . "iridium") ("Pt" . "platinum") ("Au" . "gold") ("Hg" . "mercury") ("Tl" . "thallium") ("Pb" . "lead") ("Bi" . "bismuth") ("Po" . "polonium") ("At" . "astatine") ("Rn" . "radon") ("Fr" . "francium") ("Ra" . "radium") ("Ac" . "actinium") ("Th" . "thorium") ("Pa" . "protactinium") ("U" . "uranium") ("Np" . "neptunium") ("Pu" . "plutonium") ("Am" . "americium") ("Cm" . "curium") ("Bk" . "berkelium") ("Cf" . "californium") ("Es" . "einsteinium") ("Fm" . "fermium") ("Md" . "mendelevium") ("No" . "nobelium") ("Lr" . "lawrencium")))

(defun actinides-II-abbreviations-expanded ()
  "Quiz for expanding the abbreviations of the names of the actinides “II”."
  (interactive)
  (y-or-n-p "Actinides II")
  (let (list& element$ answer$)
    (setq list& '("Bk" "Cf" "Es" "Fm" "Md" "No" "Lr"))
    (setq list& (shuffle-list list&))
    (while (> (length list&) 0)
      (setq element$ (car list&))
      (setq list& (cdr list&))
      (setq answer$ (read-string (concat "What is the element whose symbol is " element$ "? ")))
      (when (not (string= answer$ (cdr (assoc element$ chemical-element-abbreviations-expanded@))))
        (y-or-n-p "Wrong; the answer is %s." (cdr (assoc element$ chemical-element-abbreviations-expanded@)))
        (setq list& (append list& (list element$))))
      (if (string= answer$ (cdr (assoc element$ chemical-element-abbreviations-expanded@)))
        (y-or-n-p "Correct!")))
    (message "Completed the quiz for expanding the abbreviations of the names of the actinides II.")))
; (describe-function 'actinides-II-abbreviations-expanded)

(defun actinides-I-abbreviations-expanded ()
  "Quiz for expanding the abbreviations of the names of the actinides “I”."
  (interactive)
  (y-or-n-p "Actinides I")
  (let (list& element$ answer$)
    (setq list& '("Ac" "Th" "Pa" "U" "Np" "Pu" "Am" "Cm"))
    (setq list& (shuffle-list list&))
    (while (> (length list&) 0)
      (setq element$ (car list&))
      (setq list& (cdr list&))
      (setq answer$ (read-string (concat "What is the element whose symbol is " element$ "? ")))
      (when (not (string= answer$ (cdr (assoc element$ chemical-element-abbreviations-expanded@))))
        (y-or-n-p "Wrong; the answer is %s." (cdr (assoc element$ chemical-element-abbreviations-expanded@)))
        (setq list& (append list& (list element$))))
      (if (string= answer$ (cdr (assoc element$ chemical-element-abbreviations-expanded@)))
        (y-or-n-p "Correct!")))
    (message "Completed the quiz for expanding the abbreviations of the names of the actinides I.")))
; (describe-function 'actinides-I-abbreviations-abbreviated)

(defun lanthanides-II-abbreviations-expanded ()
  "Quiz for expanding the abbreviations of the names of the lanthanides “II”."
  (interactive)
  (y-or-n-p "Lanthanides II")
  (let (list& element$ answer$)
    (setq list& '("Tb" "Dy" "Ho" "Er" "Tm" "Yb" "Lu"))
    (setq list& (shuffle-list list&))
    (while (> (length list&) 0)
      (setq element$ (car list&))
      (setq list& (cdr list&))
      (setq answer$ (read-string (concat "What is the element whose symbol is " element$ "? ")))
      (when (not (string= answer$ (cdr (assoc element$ chemical-element-abbreviations-expanded@))))
        (y-or-n-p "Wrong; the answer is %s." (cdr (assoc element$ chemical-element-abbreviations-expanded@)))
        (setq list& (append list& (list element$))))
      (if (string= answer$ (cdr (assoc element$ chemical-element-abbreviations-expanded@)))
        (y-or-n-p "Correct!")))
    (message "Completed the quiz for expanding the abbreviations of the names of the lanthanides II.")))
; (describe-function 'lanthanides-II-abbreviations-expanded)

(defun lanthanides-I-abbreviations-expanded ()
  "Quiz for expanding the abbreviations of the names of the lanthanides “I”."
  (interactive)
  (y-or-n-p "Lanthanides I")
  (let (list& element$ answer$)
    (setq list& '("La" "Ce" "Pr" "Nd" "Pm" "Sm" "Eu" "Gd"))
    (setq list& (shuffle-list list&))
    (while (> (length list&) 0)
      (setq element$ (car list&))
      (setq list& (cdr list&))
      (setq answer$ (read-string (concat "What is the element whose symbol is " element$ "? ")))
      (when (not (string= answer$ (cdr (assoc element$ chemical-element-abbreviations-expanded@))))
        (y-or-n-p "Wrong; the answer is %s." (cdr (assoc element$ chemical-element-abbreviations-expanded@)))
        (setq list& (append list& (list element$))))
      (if (string= answer$ (cdr (assoc element$ chemical-element-abbreviations-expanded@)))
        (y-or-n-p "Correct!")))
    (message "Completed the quiz for expanding the abbreviations of the names of the lanthanides I.")))
; (describe-function 'lanthanides-I-abbreviations-expanded)

(defun transition-metals-III-abbreviations-expanded ()
  "Quiz for expanding the abbreviations of the names of the transition metals “III”."
  (interactive)
  (y-or-n-p "Transition Metals III")
  (let (list& element$ answer$)
    (setq list& '("Ni" "Pd" "Pt" "Cu" "Ag" "Au" "Zn" "Cd" "Hg"))
    (while (> (length list&) 0)
      (setq element$ (car list&))
      (setq list& (cdr list&))
      (setq answer$ (read-string (concat "What is the element whose symbol is " element$ "? ")))
      (when (not (string= answer$ (cdr (assoc element$ chemical-element-abbreviations-expanded@))))
        (y-or-n-p "Wrong; the answer is %s." (cdr (assoc element$ chemical-element-abbreviations-expanded@)))
        (setq list& (append list& (list element$))))
      (if (string= answer$ (cdr (assoc element$ chemical-element-abbreviations-expanded@)))
        (y-or-n-p "Correct!")))
    (message "Completed the quiz for expanding the abbreviations of the names of the transition metals III.")))
; (describe-function 'transition-metals-III-abbreviations-expanded)

(defun transition-metals-II-abbreviations-expanded ()
  "Quiz for expanding the abbreviations of the names of the transition metals “II”."
  (interactive)
  (y-or-n-p "Transition Metals II")
  (let (list& element$ answer$)
    (setq list& '("Mn" "Tc" "Re" "Fe" "Ru" "Os" "Co" "Rh" "Ir"))
    (while (> (length list&) 0)
      (setq element$ (car list&))
      (setq list& (cdr list&))
      (setq answer$ (read-string (concat "What is the element whose symbol is " element$ "? ")))
      (when (not (string= answer$ (cdr (assoc element$ chemical-element-abbreviations-expanded@))))
        (y-or-n-p "Wrong; the answer is %s." (cdr (assoc element$ chemical-element-abbreviations-expanded@)))
        (setq list& (append list& (list element$))))
      (if (string= answer$ (cdr (assoc element$ chemical-element-abbreviations-expanded@)))
        (y-or-n-p "Correct!")))
    (message "Completed the quiz for expanding the abbreviations of the names of the transition metals II.")))
; (describe-function 'transition-metals-II-abbreviations-expanded)

(defun transition-metals-I-abbreviations-expanded ()
  "Quiz for expanding the abbreviations of the names of the transition metals “I”."
  (interactive)
  (y-or-n-p "Transition Metals I")
  (let (list& element$ answer$)
    (setq list& '("Sc" "Y" "Ti" "Zr" "Hf" "V" "Nb" "Ta" "Cr" "Mo" "W"))
    (while (> (length list&) 0)
      (setq element$ (car list&))
      (setq list& (cdr list&))
      (setq answer$ (read-string (concat "What is the element whose symbol is " element$ "? ")))
      (when (not (string= answer$ (cdr (assoc element$ chemical-element-abbreviations-expanded@))))
        (y-or-n-p "Wrong; the answer is %s." (cdr (assoc element$ chemical-element-abbreviations-expanded@)))
        (setq list& (append list& (list element$))))
      (if (string= answer$ (cdr (assoc element$ chemical-element-abbreviations-expanded@)))
        (y-or-n-p "Correct!")))
    (message "Completed the quiz for expanding the abbreviations of the names of the transition metals I.")))
; (describe-function 'transition-metals-I-abbreviations-expanded)

(defun post-transition-metals-abbreviations-expanded ()
  "Quiz for expanding the abbreviations of the names of the post-transition metals."
  (interactive)
  (y-or-n-p "Post-Transition Metals")
  (let (list& element$ answer$)
    (setq list& '("Al" "Ga" "In" "Tl" "Sn" "Pb" "Bi" "Po"))
    (setq list& (shuffle-list list&))
    (while (> (length list&) 0)
      (setq element$ (car list&))
      (setq list& (cdr list&))
      (setq answer$ (read-string (concat "What is the element whose symbol is " element$ "? ")))
      (when (not (string= answer$ (cdr (assoc element$ chemical-element-abbreviations-expanded@))))
        (y-or-n-p "Wrong; the answer is %s." (cdr (assoc element$ chemical-element-abbreviations-expanded@)))
        (setq list& (append list& (list element$))))
      (if (string= answer$ (cdr (assoc element$ chemical-element-abbreviations-expanded@)))
        (y-or-n-p "Correct!")))
    (message "Completed the quiz for expanding the abbreviations of the names of the post-transition metals.")))
; (describe-function 'post-transition-metals-abbreviations-expanded)

(defun metalloids-abbreviations-expanded ()
  "Quiz for expanding the abbreviations of the names of the metalloids."
  (interactive)
  (y-or-n-p "Metalloids")
  (let (list& element$ answer$)
    (setq list& '("B" "Si" "Ge" "As" "Sb" "Te" "At"))
    (while (> (length list&) 0)
      (setq element$ (car list&))
      (setq list& (cdr list&))
      (setq answer$ (read-string (concat "What is the element whose symbol is " element$ "? ")))
      (when (not (string= answer$ (cdr (assoc element$ chemical-element-abbreviations-expanded@))))
        (y-or-n-p "Wrong; the answer is %s." (cdr (assoc element$ chemical-element-abbreviations-expanded@)))
        (setq list& (append list& (list element$))))
      (if (string= answer$ (cdr (assoc element$ chemical-element-abbreviations-expanded@)))
        (y-or-n-p "Correct!")))
    (message "Completed the quiz for expanding the abbreviations of the names of the metalloids.")))
; (describe-function 'metalloids-abbreviations-expanded)

(defun alkaline-earth-metals-abbreviations-expanded ()
  "Quiz for expanding the abbreviations of the names of the alkaline earth metals."
  (interactive)
  (y-or-n-p "Alkaline Earth Metals")
  (let (list& element$ answer$)
    (setq list& '("Be" "Mg" "Ca" "Sr" "Ba" "Ra"))
    (while (> (length list&) 0)
      (setq element$ (car list&))
      (setq list& (cdr list&))
      (setq answer$ (read-string (concat "What is the element whose symbol is " element$ "? ")))
      (when (not (string= answer$ (cdr (assoc element$ chemical-element-abbreviations-expanded@))))
        (y-or-n-p "Wrong; the answer is %s." (cdr (assoc element$ chemical-element-abbreviations-expanded@)))
        (setq list& (append list& (list element$))))
      (if (string= answer$ (cdr (assoc element$ chemical-element-abbreviations-expanded@)))
        (y-or-n-p "Correct!")))
    (message "Completed the quiz for expanding the abbreviations of names of the alkaline earth metals.")))
; (describe-function 'alkaline-earth-metals-abbreviations-expanded)

(defun alkali-metals-abbreviations-expanded ()
  "Quiz for expanding the abbreviations of the names of the alkali metals."
  (interactive)
  (y-or-n-p "Alkali Metals")
  (let (list& element$ answer$)
    (setq list& '("Li" "Na" "K" "Rb" "Cs" "Fr"))
    (while (> (length list&) 0)
      (setq element$ (car list&))
      (setq list& (cdr list&))
      (setq answer$ (read-string (concat "What is the element whose symbol is " element$ "? ")))
      (when (not (string= answer$ (cdr (assoc element$ chemical-element-abbreviations-expanded@))))
        (y-or-n-p "Wrong; the answer is %s." (cdr (assoc element$ chemical-element-abbreviations-expandedd@)))
        (setq list& (append list& (list element$))))
      (if (string= answer$ (cdr (assoc element$ chemical-element-abbreviations-expanded@)))
        (y-or-n-p "Correct!")))
    (message "Completed quiz for expanding the abbreviations of the names of the alkali metals.")))
; (describe-function 'alkali-metals-abbreviations-expanded)

(defun noble-gases-abbreviations-expanded ()
  "Quiz for expanding the abbreviations of the names of the nonreactive nonmetals (i.e., noble gases)."
  (interactive)
  (y-or-n-p "Noble Gases")
  (let (list& element$ answer$)
    (setq list& '("He" "Ne" "Ar" "Kr" "Xe" "Rn"))
    (while (> (length list&) 0)
      (setq element$ (car list&))
      (setq list& (cdr list&))
      (setq answer$ (read-string (concat "What is the element whose symbol is " element$ "? ")))
      (when (not (string= answer$ (cdr (assoc element$ chemical-element-abbreviations-expanded@))))
        (y-or-n-p "Wrong; the answer is %s." (cdr (assoc element$ chemical-element-abbreviations-expanded@)))
        (setq list& (append list& (list element$))))
      (if (string= answer$ (cdr (assoc element$ chemical-element-abbreviations-expanded@)))
        (y-or-n-p "Correct!")))
    (message "Completed the quiz for expanding the abbreviations of the names of the noble gases.")))
; (describe-function 'noble-gases-abbreviations-expanded)

(defun reactive-nonmetals-abbreviations-expanded ()
  "Quiz for expanding the abbreviations of the names of the reactive nonmetals."
  (interactive)
  (y-or-n-p "Reactive Nonmetals")
  (let (list& element$ answer$)
    (setq list& '("H" "C" "N" "P" "O" "S" "Se" "F" "Cl" "Br" "I"))
    (while (> (length list&) 0)
      (setq element$ (car list&))
      (setq list& (cdr list&))
      (setq answer$ (read-string (concat "What is the element whose symbol is " element$ "? ")))
      (when (not (string= answer$ (cdr (assoc element$ chemical-element-abbreviations-expanded@))))
        (y-or-n-p "Wrong; the answer is %s." (cdr (assoc element$ chemical-element-abbreviations-expanded@)))
        (setq list& (append list& (list element$))))
      (if (string= answer$ (cdr (assoc element$ chemical-element-abbreviations-expanded@)))
        (y-or-n-p "Correct!")))
    (message "Completed the quiz for expanding the abbreviations of the names of the reactive nonmetals.")))
; (describe-function 'reactive-nonmetals-abbreviations-expanded)

(defun chemical-elements-abbreviations-expanded ()
  "Quiz for expanding the abbreviations of the names of some chemical elements."
  (interactive)
  (let (rand-int)
    (setq rand-int (random 13))
    (cond
      ((= rand-int 0) (reactive-nonmetals-abbreviations-expanded))
      ((= rand-int 1) (noble-gases-abbreviations-expanded))
      ((= rand-int 2) (alkali-metals-abbreviations-expanded))
      ((= rand-int 3) (alkaline-earth-metals-abbreviations-expanded))
      ((= rand-int 4) (metalloids-abbreviations-expanded))
      ((= rand-int 5) (post-transition-metals-abbreviations-expanded))
      ((= rand-int 6) (transition-metals-I-abbreviations-expanded))
      ((= rand-int 7) (transition-metals-II-abbreviations-expanded))
      ((= rand-int 8) (transition-metals-III-abbreviations-expanded))
      ((= rand-int 9) (lanthanides-I-abbreviations-expanded))
      ((= rand-int 10) (lanthanides-II-abbreviations-expanded))
      ((= rand-int 11) (actinides-I-abbreviations-expanded))
      ((= rand-int 12) (actinides-II-abbreviations-expanded)))))
; (describe-function 'chemical-elements-abbreviations-expanded)

(defun chemical-elements-comprehensive-abbreviations-expanded ()
  "Quiz for expanding the abbreviations of the names of all the chemical elements (up to A=103)."
  (interactive)
  (reactive-nonmetals-abbreviations-expanded)
  (noble-gases-abbreviations-expanded)
  (alkali-metals-abbreviations-expanded)
  (alkaline-earth-metals-abbreviations-expanded)
  (metalloids-abbreviations-expanded)
  (post-transition-metals-abbreviations-expanded)
  (transition-metals-I-abbreviations-expanded)
  (transition-metals-II-abbreviations-expanded)
  (transition-metals-III-abbreviations-expanded)
  (lanthanides-I-abbreviations-expanded)
  (lanthanides-II-abbreviations-expanded)
  (actinides-I-abbreviations-expanded)
  (actinides-II-abbreviations-expanded)
  (message "Completed the comprehensive quiz for the abbreviations of the names of all the chemical elements (up to A=103)."))
; (describe-function 'chemical-elements-comprehensive-abbreviations-expanded)
